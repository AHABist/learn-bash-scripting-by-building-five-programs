{
  "version": "0.1.4",
  "summary": {
    "title": "Learn Bash Scripting by Building Five Programs",
    "description": "> Welcome to the Bash Scripting lessons!"
  },
  "config": {
    "setup": {
      "commands": [
        "cd .freeCodeCamp && npm install",
        "sudo cp ~/project/.freeCodeCamp/.bashrc ~"
      ],
      "commits": [
        "8ec296f1566d5c57d83526564b0cae8dc391a64a"
      ]
    },
    "testRunner": {
      "command": "./node_modules/.bin/mocha",
      "args": {
        "tap": "--reporter=mocha-tap-reporter"
      },
      "directory": ".freeCodeCamp"
    },
    "repo": {
      "uri": "https://github.com/moT01/.learn-bash-scripting-by-building-five-programs",
      "branch": "v0.1.4"
    },
    "dependencies": [
      {
        "name": "node",
        "version": ">=10"
      }
    ]
  },
  "levels": [
    {
      "id": "10",
      "title": "Start the Terminal",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "10.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5f2379806a709a3bdb3d3d84246aeddb40f91a13"
            ]
          },
          "content": "**The first thing you need to do is start the terminal.** Do that by clicking the \"hamburger\" menu at the top left of the screen, going to the \"terminal\" section, and clicking \"new terminal\". Once you open a new one, type `echo hello bash` into the terminal and press enter.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "20",
      "title": "touch questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "20.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1fb902dd3e9cf6fa999241f53d21fc0c1e234e51"
            ]
          },
          "content": "You can run commands in the terminal or put them in a file to be run as a script. You will be making five small programs to learn some scripting. The first one will be a \"questionnaire\". Use the `touch` command to create `questionnaire.sh` in the `project` folder.",
          "hints": [
            "Type `touch questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "30",
      "title": "Add echo questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "30.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "af02a9ed14e54c7e24b061e975347d8f795a2418"
            ]
          },
          "content": "To start, just add `echo Hello Questionnaire` at the top of the file you just created.",
          "hints": [
            "Add the suggested text to the `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "35",
      "title": "sh questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "35.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f03b8861417052c1bfa8779c623b88f26fa41071"
            ]
          },
          "content": "Your script has one command. Run it with `sh questionnaire.sh` to see what happens. `sh` stands for `shell`.",
          "hints": [
            "Type `sh questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "40",
      "title": "bash questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "40.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7e803ac130f82c56d36f8fdad2c592b0c70f308e"
            ]
          },
          "content": "When you ran the script, the `shell` interpreter was used. Run your script again with `bash questionnaire.sh` to use the `bash` interpreter. `bash` stands for `bourne-again shell`.",
          "hints": [
            "Type `bash questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "50",
      "title": "which bash",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "50.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0f04eebd12bd8efbf46355acfa10dd32bb3abd8d"
            ]
          },
          "content": "The output was the same, but there are many other interpreters which may not give the output you expect. Find out where the `bash` interpreter is located by entering `which bash` in the terminal.",
          "hints": [
            "Type `which bash` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "60",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "60.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d62fb3c5cdac8e396390afd65a89651387b96559"
            ]
          },
          "content": "That's the absolute path to the `bash` interpreter. You can tell your program to use it by placing a \"shebang\" at the very top of the file like this: `#! <path_to_interpreter>`. Add a \"shebang\" at the top of your file, the one you want looks like this: `#!/bin/bash`.",
          "hints": [
            "Add `#!/bin/bash` at the top of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "70",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "70.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f7ff71ae921f913e1b988e78de7756288860e24c"
            ]
          },
          "content": "Now, instead of using `sh` or `bash` to run your script. You can run it be executing the file and it will default to `bash`. Run your script by executing it with `./questionnaire.sh`",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "80",
      "title": "ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "80.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "58190ca9ac0bcb3a1976a77d50ccb90e376c407d"
            ]
          },
          "content": "You should have got a permission denied message. List what's in the `project` folder in long list format with `ls -l`.",
          "hints": [
            "Type `ls -l` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "90",
      "title": "chmod +x questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "90.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2e97420595f149b5feeb5668240b333a68fce480"
            ]
          },
          "content": "You should see `-rw-r--r--` next to your file. All but the first character (`-`) describe permissions certain users have with the file. I don't see an `x` anywhere, so nobody can execute it. Enter `chmod +x questionnnaire.sh` in the terminal to give everyone executable permissions.",
          "hints": [
            "Type `chmod +x questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "100",
      "title": "ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "100.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "099efee5f9016d1126f4da55b07c3f10ac43cd0c"
            ]
          },
          "content": "List what's in the folder again with `ls -l` to see the new permissions.",
          "hints": [
            "Type `ls -l` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "110",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "110.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7a7f40fb9206e8c2de0a5b055cde427ec0856a2a"
            ]
          },
          "content": "The `x` was added by each type of user to denote that anyone can execute the file. Run your file again by executing it with `./questionnaire.sh`.",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "140",
      "title": "Add ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "140.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e56d2ab8524491b3ad93f6e1c71d61d4d27b2d3a"
            ]
          },
          "content": "Now it works. In your script, you can add any commands that you would be able to enter in the terminal. Test this by adding the `ls -l` command below your other command.",
          "hints": [
            "Add `ls -l` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "150",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "150.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2ccf7987dc13bb2d3a0d357432c97242cf5eef30"
            ]
          },
          "content": "Run the script by executing it again.",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "160",
      "title": "Delete all - shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "160.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e9ef8dd76fec67c505f9ef6c03d6f18e9a929c2b"
            ]
          },
          "content": "Your script printed the one file as if you entered the `ls -l` in the terminal. Delete everything but the \"shebang\" from your file so you can start making the questionnaire.",
          "hints": [
            "Only `#!/bin/bash` should remain in your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "170",
      "title": "Add QUESTION1 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "170.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "242ab152694af02f88cba7db069807a0b36cc669"
            ]
          },
          "content": "Bash has variables, functions, and other things you might be familiar with. You can create a variable with `VARIABLE_NAME=VALUE`. There cannot be any spaces around the equal (`=`) sign. If a variable has any spaces in it, place double quotes around it. Create a variable named `QUESTION1` and set it's value to `\"What's your name?\"`.",
          "hints": [
            "Add `QUESTION1=\"What's your name?\"` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "180",
      "title": "Add echo $QUESTION1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "180.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "240b6071ae783abddfa20fe2eab78ba5fe91d4ce"
            ]
          },
          "content": "To use a variable, place `$` in front of it like this: `$VARIABLE_NAME`. Shell scripts run from top to bottom, so you can only use variable below where it's created. Use `echo` to print your variable.",
          "hints": [
            "Add `echo $QUESTION1` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "190",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "190.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1e0ef0e317209e8ccec30867652f06c0b372b682"
            ]
          },
          "content": "Run the file like you did before to see if it worked.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "200",
      "title": "Add read NAME",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "200.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "701a270e8bbde4dd5e9885926810a79c8625a149"
            ]
          },
          "content": "The question was printed. Next, you want to be able to accept input from a user. You can do that with `read` like this: `read VARIABLE_NAME`. This will get user input and store it into a new variable. Use `read` to get input and store it in a variable named `NAME`.",
          "hints": [
            "Add `read NAME` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "210",
      "title": "Add echo Hello $NAME",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "210.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "92ef7b6b2c26de80791a8f626b367f97dd5aaaa6"
            ]
          },
          "content": "At the bottom of your script, use `echo` to print `Hello, <name>.` to the terminal.",
          "hints": [
            "Use your `$NAME` variable in place of `<name>`",
            "Add `echo Hello, $NAME.` at the bottom of your script"
          ]
        }
      ]
    },
    {
      "id": "220",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "220.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e5711cac54255ae244dfc1eeb3bb6444be722ab0"
            ]
          },
          "content": "Run the file again. Type your name and press enter after it asks for it.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "230",
      "title": "Add QUESTION2 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "230.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1882beb757517d99fb836f5e93ed122ac9adec5c"
            ]
          },
          "content": "Right below your first variable, create another one named `QUESTION2`. Set the value to, `Where are you from?`. Make sure to put it in double quotes.",
          "hints": [
            "Here's an example: `VARIABLE=\"value\"`",
            "Add `QUESTION2=\"Where are you from?\"` to your script"
          ]
        }
      ]
    },
    {
      "id": "240",
      "title": "Add echo $QUESTION2",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "240.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8dffff8095bf4bd3bd60948798e2c5b1dfb42b40"
            ]
          },
          "content": "Use your new variable to print the next question after your `read` command.",
          "hints": [
            "Use `echo` to print the variable",
            "Add `echo $QUESTION2` below everything else"
          ]
        }
      ]
    },
    {
      "id": "250",
      "title": "Add read LOCATION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "250.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c36dcf6df4a1f8d72a359e534ffc46eb2f0a3a4a"
            ]
          },
          "content": "Use `read` to get input from the user into a variable named `LOCATION`.",
          "hints": [
            "Add `read LOCATION` to your script below everything else"
          ]
        }
      ]
    },
    {
      "id": "260",
      "title": "Add echo Hello $NAME from $LOCATION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "260.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "edbad36db538c309731efba1a336836e7d5b95fe"
            ]
          },
          "content": "Change the existing response of `\"Hello $NAME` to `\"Hello <name> from <location>.\"`. Use your two variables in place of `<name>` and `<location` and make sure the command is at the bottom of the file.",
          "hints": [
            "The suggested command should look like: `echo Hello $NAME from $LOCATION.`"
          ]
        }
      ]
    },
    {
      "id": "270",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "270.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ccd7692d957dfa3f0f023a1f484b861a5a6779cb"
            ]
          },
          "content": "Run the script and enter values when it is waiting for input.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "280",
      "title": "Add echo \"~~ Questionnaire ~~\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "280.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "863c182eb0233300883fd39a08848f6ea3396235"
            ]
          },
          "content": "Add a title to your program for me. Use `echo` to print `~~ Questionnaire ~~` before anything else is printed.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "290",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "290.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4e53334dbeffe159b0065754c75f6069ae43154b"
            ]
          },
          "content": "Run the script and enter values until it is done again so you can see what the title looks like.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "300",
      "title": "echo --help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "300.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0f3bcb4cb6d2463a21beaddd35d1b6007f107e38"
            ]
          },
          "content": "It would be nice if there was some new lines around the title. You've probably used the `--help` flag before, see if you can use it with `echo` to try and find a way to add empty lines.",
          "hints": [
            "Type `echo --help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "310",
      "title": "man echo",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "310.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "59ebd7a929d0420b4b8f2c9882dd51fd555a5222"
            ]
          },
          "content": "That didn't work as I hoped. Another way to find information about a command is with `man`. It stands for `manual` and you can use it like this: `man <command>`. See if there's a manual for `echo`.",
          "hints": [
            "Type `man echo` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "320",
      "title": "Add echo -e \\n~~ Questionnaire ~~\\n",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "320.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6ddf674e2c6adf55cfadeae9a7e93542079e7014"
            ]
          },
          "content": "That `-e` option looks promising, and the `\\n` below it says `new line`. Change the title command to `echo -e \\n~~ Questionnaire ~~\\n` to put an empty line before and after it.",
          "hints": [
            "Change the suggested line to `echo -e \\n~~ Questionnaire ~~\\n`"
          ]
        }
      ]
    },
    {
      "id": "323",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "323.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1cc2be40d71e9a1ec97ccd0b868df08e22c12950"
            ]
          },
          "content": "Run it to see if it worked. You can press `ctrl+c` to close the program after it starts if you don't want to enter values.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "326",
      "title": "Change to echo -e \"\\n~~ Questionnaire ~~\\n\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "326.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d63522f09671cdd54e3f87b646c25165cc7cde9d"
            ]
          },
          "content": "Didn't work. When using patterns like `\\n`, you need to enclose the string in double quotes (`\"<string>\"`). Place double quotes around the title to see it will print the empty lines.",
          "hints": [
            "Change the suggested line to `echo -e \"\\n~~ Questionnaire ~~\\n\"`"
          ]
        }
      ]
    },
    {
      "id": "330",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "330.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "91728600742b38311a449acee17bcd45e4eb144e"
            ]
          },
          "content": "Try running it again to make sure it worked.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "340",
      "title": "Add QUESTION3 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "340.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8a8ea473eb44665a5c01a17a4bd26ee8d27290c1"
            ]
          },
          "content": "It's working :smile: Create a `QUESTION3` variable next to the other ones and set the value to `\"What's your favorite coding website?\"`",
          "hints": [
            "Add `QUESTION3=\"What's your favorite coding website?\"` by the other variables"
          ]
        }
      ]
    },
    {
      "id": "345",
      "title": "Add QUESTION3 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "345.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ccaa773a10a761be4e805b05d54f6bace0333948"
            ]
          },
          "content": "Use `echo` to print the third question after the other two.",
          "hints": [
            "Add `echo $QUESTION3` below the `read LOCATION`"
          ]
        }
      ]
    },
    {
      "id": "350",
      "title": "read WEBSITE",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "350.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "50e79dba9003cc0e9097b9266428846239b6823b"
            ]
          },
          "content": "Add code to `read` input into a variable named `WEBSITE`.",
          "hints": [
            "Add `read WEBSITE` below where you printed your third question"
          ]
        }
      ]
    },
    {
      "id": "360",
      "title": "echo final sentence",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "360.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "75354fbbf638ba0ea544c79e3cbf9d36b5158608"
            ]
          },
          "content": "In your response, instead of printing the users name and location, change the `echo` command to print this sentence: `Hello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!`.",
          "hints": [
            "The command should look like this: `echo Hello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!`"
          ]
        }
      ]
    },
    {
      "id": "363",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "363.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "98c360beb5ea7f181134334484cc3c39f1a0f92f"
            ]
          },
          "content": "Run the script and enter values when the program is waiting. Lets see the final output.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "366",
      "title": "Add line breaks around final sentence",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "366.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "84bc57c23d9966f1f3d120ef34115a3c6d5c0f8e"
            ]
          },
          "content": "One last thing. Change that final sentence to print an empty line before it like you did for the title.",
          "hints": [
            "Use the `echo` command with the `-e` flag and a newline (`\\n`) character",
            "Here's an example: `echo -e \"\\n<message>\"`",
            "The final command should look like this: `echo \"\\nHello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!\"`"
          ]
        }
      ]
    },
    {
      "id": "370",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "370.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "65ecc9032ddcc36db551f898b7af0fa5471cc28d"
            ]
          },
          "content": "Run it one last time and enter values when it asks to see if you like how it looks.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "380",
      "title": "touch countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "380.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e1d24a6abc1fcf3e515c4079ba61a8bc990019e8"
            ]
          },
          "content": "Looks good. I think you are done that script for now. Use the `touch` command to create a new file named `countdown.sh` in your `project` folder. This program will count down from a given input.",
          "hints": [
            "Type `touch countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "390",
      "title": "chmod +x countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "390.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a1e7b0297073b981d40f1fba54fdf1a780cc9afb"
            ]
          },
          "content": "Give your file executable permissions so you can run it like the other one. It's the `chmod` command.",
          "hints": [
            "Here's an example `chmod <permissions> <filename>`",
            "The value for permissions you want to use is `+x`",
            "You previously used `chmod +x questionnaire.sh`",
            "Type `chmod +x countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "400",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "400.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "60f83c9d8e3755d5fc43de0281f0444ccbd84d0f"
            ]
          },
          "content": "You want to use the `bash` interpreter again. Add a `shebang` at the top of your new file to denote that.",
          "hints": [
            "A `shebang` looks like this: `#!<path_to_interpreter>`",
            "Enter `which bash` in the terminal to see where `bash` is located",
            "Look at the `shebang` in your first script to get the syntax",
            "It should look like this: `#!/bin/bash`",
            "Add `#!/bin/bash` at the top of your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "410",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "410.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b952b553da24d7c7b27af4167f30eae0d5f83a6b"
            ]
          },
          "content": "Comments in `bash` look like this: `#<comment>`. Add a comment below the `shebang` that says `Program that counts down to zero from a given argument` so people know what it does.",
          "hints": [
            "Add `#Program that counts down to zero from a given argument` to your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "420",
      "title": "Add echo $*",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "420.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "451952f5cf1e551f2e1f420fb3b70cb4f458363f"
            ]
          },
          "content": "Programs can take arguments. You can access them a few different ways with `$`. Add `echo $*` in your script to print all arguments passed to it.",
          "hints": [
            "Add `echo $*` at the bottom of the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "425",
      "title": "./countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "425.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1ec5b414a18c9280ca2357f676846e3ce2d668c1"
            ]
          },
          "content": "Execute your script with `./countdown.sh`.",
          "hints": [
            "Type `./countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "430",
      "title": "./countdown.sh arg1 arg2 arg3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "430.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "70cd4ae4a7be7af00caaf2f371b82658708ccf43"
            ]
          },
          "content": "Nothing was printed. Run your script again, but this time add three arguments to the command; `arg1`, `arg2`, and `arg3`. Place them after the command with a space before each one.",
          "hints": [
            "Type `./countdown.sh arg1 arg2 arg3` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "440",
      "title": "Change to echo $2",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "440.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "11299085173156bb9d21f583848aefdad0767d98"
            ]
          },
          "content": "`$*` printed all the arguments passed to your script. To access any one of them, use `$<number>`. `arg1` could have been accessed with `$1`. Change your script to `echo` the second argument instead of all the arguments.",
          "hints": [
            "Use `echo $2` to print the second argument",
            "Change `echo $*` to `echo $2` in your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "450",
      "title": "./countdown.sh arg1 arg2 arg3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "450.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "23aae415c04db3370fc807d27dc09fdcdfa467c6"
            ]
          },
          "content": "Run your file with `./countdown.sh arg1 arg2 arg3` again.",
          "hints": [
            "Type `./countdown.sh arg1 arg2 arg3` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "460",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "460.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "80f92d124ecf95efcfe8d3690e101a3a5119f097"
            ]
          },
          "content": "Now it just prints the second argument. Your program will only need one argument, you will add an `if` statement to test it. I wonder what the syntax would look like. Type `help` in the terminal to see if you can find anything.",
          "hints": [
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "470",
      "title": "man if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "470.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f2d8cb4a6d800f41ee825e79aa3b6e64a12688e2"
            ]
          },
          "content": "This is a list of the built-in commands. One of them starts with `if`. See if you can find out more about it by checking its `man` page.",
          "hints": [
            "Here's an example: `man <command>`",
            "Type `man if` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "480",
      "title": "help if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "480.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "68379046c0d9c9463ff750343bb62af58d8b7f44"
            ]
          },
          "content": "I guess there isn't a `man` page for it. At the top of the `help` screen, I noticed you can use `help <command>` to find out more. Yet another way to find out about a command. See if you can find out more about `if`.",
          "hints": [
            "Here's an example `help <command>`",
            "Type `help if` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "490",
      "title": "Add if arg1 print true",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "490.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "af5f8f158746b65ed9acb11ac8b47512d6c16d88"
            ]
          },
          "content": "The syntax is at the top, not all of it is required. Here's another example:\n\n```sh\nif [[ CONDITION ]]\nthen\n  STATEMENTS\nfi\n```\n\nRemove the `echo $2` in your new script and replace it with an `if` condition that checks `if [[ $1 == \"arg1\" ]]`. In its `then` area, use `echo` to print `true` to the screen.",
          "hints": [
            "Add the following to your `countdown.sh` file:\n```sh\nif [[ $1 == \"arg1\" ]]\nthen\n  echo true\nfi\n```"
          ]
        }
      ]
    },
    {
      "id": "500",
      "title": "./countdown arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "500.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bc6bc54d49602d130f3278637dc79d737bac702f"
            ]
          },
          "content": "The `if` statement will print `true` if you pass `arg1`. Notice that the end of the syntax is `fi` (`if` backwards). Run the script again with `arg1` as the only argument.",
          "hints": [
            "Type `./countdown.sh arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "505",
      "title": "./countdown !arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "505.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "97f50ac32685ac6b5f41432d63a67bf86ef4b4d6"
            ]
          },
          "content": "Run it again with anything except `arg1` as the first argument.",
          "hints": [
            "Type `./countdown.sh !arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "510",
      "title": "Add else print false",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "510.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a07631c825eae4c560014e3523962387b2fb8471"
            ]
          },
          "content": "One of the optional parts of `if` was an `else` area. You can use it like this:\n\n```sh\nif [[ CONDITION ]]\nthen\n  STATEMENTS\nelse\n  STATEMENTS\nfi\n```\n\nAdd an `else` to your existing `if` condition. Use `echo` to print `false` to the terminal in its `STATEMENTS` area.",
          "hints": [
            "Add the following to your script:\n```sh\nif [[ $1 == \"arg1\" ]]\nthen\n  echo true\nelse\n  echo false\nfi\n```"
          ]
        }
      ]
    },
    {
      "id": "520",
      "title": "./countdown !arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "520.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "512d6a02274bae6af5ca4775f6296416c6331a22"
            ]
          },
          "content": "Run the script again and use anything except `arg1` as the only argument.",
          "hints": [
            "Type `./countdown.sh !arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "530",
      "title": "Change if condition -lt 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "530.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2e9fea3905eafedebb10db0a819f34058a382fe9"
            ]
          },
          "content": "Your program is expecting an integer to count down from as its argument. You can compare integers inside the brackets (`[[ ... ]]`) of your `if` with `-eq` (equal), `-ne` (not equal), `-lt` (less than), `-le` (less than or equal), `-gt` (greater than), `-ge` (greater than or equal). Change your `if` condition to check if your first argument is less than `5`.",
          "hints": [
            "Your `if` condition should look like this: `[[ $1 -lt 5 ]]`",
            "It's the one in the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "540",
      "title": "./countdown 4",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "540.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4261fcc7f522c7961c24ac3a6d3200051fcf9e6a"
            ]
          },
          "content": "Run the script again and use `4` as a first argument.",
          "hints": [
            "Type `./countdown.sh 4` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "542",
      "title": "./countdown 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "542.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "43975e86c2266946935e41349ea850d6708d91fe"
            ]
          },
          "content": "It printed `true` since your argument was less than `5`. Run the script again and use `5` as a first argument.",
          "hints": [
            "Type `./countdown.sh 5` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "544",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "544.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "80381c28e3db4fefc30d34ee38719d22c2d5fed0"
            ]
          },
          "content": "As expected, that printed `false`. Take a look at that `help` menu again. I want to see if we can find out more about how these expressions work.\n help",
          "hints": [
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "546",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "546.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7c5994eef9d1e966de7c8689a0ff1a6719fa8665"
            ]
          },
          "content": "Near the top left, it says `[[ expression ]]`. See if you can get more info about that with the `help` command like you did with `help if`.",
          "hints": [
            "Here's an example: `help <command>`",
            "Type `help [[ expression ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "548",
      "title": "help test",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "548.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "641f8d626df238df8ccc3c78146d9d0cac88e891"
            ]
          },
          "content": "There's some good info there. Looks like you can use some, probably familiar, things like `&&`, `||`, `==` and `!=`. It says something about the `test` built-in command. See if you can bring up the `help` menu for that.",
          "hints": [
            "View the `help` menu of the suggested command like you did before",
            "Here's and example: `help <command>`",
            "Type `help test` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "550",
      "title": "Change if to [[ $1 -le 5 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "550.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a9ad12bb0d2ff97fce76c3028dc5c48c7c6feda4"
            ]
          },
          "content": "That's what I was looking for. At the top is some operators to use with files. There's some string and other operators as well. You used the arithmetic operators with your `if` condition. Change the condition in your script to check if the first argument is less than or equal to `5`.",
          "hints": [
            "The `if` condition should look like this: `[[ $1 -le 5 ]]`",
            "It's the `if` in your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "552",
      "title": "./countdown 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "552.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e54435630bf318d738c40d539c0b54b9eedbc024"
            ]
          },
          "content": "Run the script again and use `5` as a first argument again.",
          "hints": [
            "Type `./countdown.sh 5` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "554",
      "title": "[[ 0 -le 5 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "554.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1b32126d9b921c10cf61da7eb6f85349d201caaa"
            ]
          },
          "content": "Now it prints `true`. Remember I said any command can run in the terminal or a script. Try running an expression right in the terminal by entering `[[ 0 -le 5 ]]` in it.",
          "hints": [
            "Enter the suggested expression in the terminal",
            "Type `[[ 0 -le 5 ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "556",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "556.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "35270b855ba6e8f483425370e360ebef6cdf2606"
            ]
          },
          "content": "Nothing happened. Each command has an exit status that can be accessed with `$?`. View the exit status of the **last command** with `echo $?`.",
          "hints": [
            "Type `echo $?` in the terminal and press enter",
            "Your second to last command should be `[[ 0 -le 5 ]]` so enter that before `echo $?` if you entered something in between them"
          ]
        }
      ]
    },
    {
      "id": "558",
      "title": "[[ 5 -lt 0 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "558.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3093218f40755654aca6c3a80cd557b6791d649f"
            ]
          },
          "content": "The exit status of `0` means it was true, `0` is indeed less or equal to `5`. Try it again with `[[ 5 -lt 0 ]]`.",
          "hints": [
            "Enter the suggested expression in the terminal",
            "Type `[[ 0 -lt 5 ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "560",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "560.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8604ae0e9fcb3bf1bf8ef7a2a1482f799b44e886"
            ]
          },
          "content": "Echo the exit status of the command you just entered.",
          "hints": [
            "Type `echo $?` in the terminal and press enter",
            "Your second to last command should be `[[ 5 -lt 0 ]]` so enter that before `echo $?` if you entered something in between them"
          ]
        }
      ]
    },
    {
      "id": "562",
      "title": "[[ 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "562.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5f2ee5fb431e23e06a0c15fddf9fb1afd4f787cb"
            ]
          },
          "content": "It printed `1` this time for false. You can separate commands on a single line with `;`. Enter your last two commands on one line like this: `[[ 5 -lt 0 ]]; echo $?`. It will run the expression, then print the exit status of it since it was the last command.",
          "hints": [
            "Type `[[ 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "564",
      "title": "[[ 10 -gt 1 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "564.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f73272dd74c7b4b4835eab1b928c3116a22abbe2"
            ]
          },
          "content": "Using the same syntax of `[[ ... ]]; echo$?`, check if `10` is greater than (`-gt`) `1` and print the exit status of the expression on one line.",
          "hints": [
            "You previously used `[[ 5 -lt 0 ]]; echo $?`",
            "Type `[[ 10 -gt 1 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "566",
      "title": "bad_command; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "566.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "55303213c7e60d64657484cf87f1568d6a2b61b8"
            ]
          },
          "content": "You can think of the exit status of `0` as true. But, more accurately, it means that the command had zero errors. All commands have an exit status. Using the same sytax, enter `bad_command;` and check its exit status on a single line.",
          "hints": [
            "You previously used `[[ 10 -gt 1 ]]; echo $?`",
            "Type `bad_command; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "568",
      "title": "ls; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "568.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "98cde8e13fdc59744fb4f456da2e15f327a423ca"
            ]
          },
          "content": "`Command not found`, with an exit status of `127`. Anything but `0` means there was an error with the command. `bad_command` didn't exist. Try it again with `ls`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example `<command>; echo $?`",
            "You previously used `bad_command; echo $?`",
            "Type `ls; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "570",
      "title": "ls -y; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "570.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c050c9c20244a8ade97765ddf5978d9d511ec5e8"
            ]
          },
          "content": "The command executed as expected and there were zero errors. So it gave you an exit status of `0`. Try it again with `ls -y`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example: `<command>; echo $?`",
            "You previously used `ls; echo $?`",
            "Type `ls -y; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "572",
      "title": "help test",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "572.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "893ec2274e6d368902a46992b3696d653def91a1"
            ]
          },
          "content": "The `-y` flag doesn't work with `ls` so it gave you an exit status code of `2`, meaning that the command was unsuccessful. View the `help` menu of the `test` command again, I want to see what else is in that list.",
          "hints": [
            "Here's an example: `help <command>`",
            "Type `help test` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "574",
      "title": "[[ -a countdown.sh ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "574.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "aa966b11f45d372166b666dbf593924b0c65b469"
            ]
          },
          "content": "You tried a few of the arithmetic operators, those work for integers. Try one of the file operators. The first one on the list checks if a file exists. Type `[[ -a countdown.sh ]]; echo $?` in the terminal to see if your file exists.",
          "hints": [
            "Enter the suggested commands in the terminal",
            "Type `[[ -a countdown.sh ]]; echo $?` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "575",
      "title": "[[ -a bad_file.txt ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "575.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f237d3a1574306b95e7efacca73e07d36581f62f"
            ]
          },
          "content": "The file must exist. It's checking the folder the command is entered from. Try it again with `bad_file.txt`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example: `<command>; echo $?`",
            "You previously used `[[ -a countdown.sh ]]; echo $?`",
            "Type `[[ -a bad_file.txt ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "576",
      "title": "[[ -x countdown.sh ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "576.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "157285d4350dd4ed12633403a847ced5e1ef2f29"
            ]
          },
          "content": "`bad_file.txt` doesn't exist. I think you're getting the hang of this. Using the same syntax, check if you have permissions to execute your file.",
          "hints": [
            "View the `help test` menu to find the file operator for checking if a file is executable by you",
            "The syntax you want is `[[ ... ]]; echo $?`",
            "Type `[[ -x countdown.sh ]]; echo $?` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "582",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "582.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ad6acb5b8fc91a92f2a88edaa8c87b8a5a377d0d"
            ]
          },
          "content": "You played around with a number of the expressions. View the `help [[ expression ]]` menu again that you looked at before to see a few more options.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help [[ expression ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "584",
      "title": "[[ -x countdown.sh && 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "584.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6966a763fbfbf4349a2aa2aeb4eabdcaced9a2c5"
            ]
          },
          "content": "Some of these options existed in the `help test` menu, but I prefer these when they can be used. Enter `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` in the terminal to test if both conditions are true.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "586",
      "title": "[[ -x countdown.sh || 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "586.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d59865ca84cf2fe272e0c6711d97568508b3c47e"
            ]
          },
          "content": "Both conditions weren't true, so the command gave an error. Try testing the same two conditions with the `or` operator.",
          "hints": [
            "Modify this `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` with the suggestion and enter it in the terminal",
            "Use the or operator from the `help [[ expession ]]` menu",
            "The `or` operator is `||`",
            "Type `[[ -x countdown.sh || 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "588",
      "title": "Change if to [[ $1 -gt 0 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "588.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c563b7923d2329da8d08e40dee2851755d9af3c9"
            ]
          },
          "content": "One of the conditions was true, so you didn't get any errors. I think that's enough of a detour. Back in your script, change the `if` condition to check if the first argument is greater than zero.",
          "hints": [
            "The `if` condition should look like this: `[[ $1 -gt 0 ]]`",
            "It's in the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "590",
      "title": "Change if !# message",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "590.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a4afc72fc9cf096921ff94e97495791280ac5293"
            ]
          },
          "content": "The condition you added should check if a positive integer was entered and execute the `then` area. Change the message printed in the `else` area to `Enter a positive integer as the first argument.` so a user knows what's expected.",
          "hints": [
            "The `else` area should look like this: `echo Enter a positive integer as the first argument.`"
          ]
        }
      ]
    },
    {
      "id": "600",
      "title": "./countdown 1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "600.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "99c56262a37b3904db409c082548dd37cebc8185"
            ]
          },
          "content": "Run your script and use `1` as a first argument.",
          "hints": [
            "Type `./countdown.sh 1` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "610",
      "title": "./countdown 0",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "610.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "340bc50b58f37cf1b10aa0183dba6c3cbf979cb0"
            ]
          },
          "content": "Run the script again and use anything but a positive integer as the only argument.",
          "hints": [
            "Type `./countdown.sh 0` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "615",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "615.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a9bacf22821dde7c5d44b816cfddc01b9bdbf939"
            ]
          },
          "content": "Looks like your `if` condition is working. Next, you want to loop over the argument and count down to zero from it. Check the `help` menu to see if there's any commands for this.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "620",
      "title": "Add for loop for countdown",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "620.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d41c5718cda4c9b27f2ee93423e5f7b3abf5b07c"
            ]
          },
          "content": "There's two `for` loops in there, you want the second one. Here's an example:\n\n```sh\nfor (( i = 10; i > 0; i-- ))\ndo\n  echo $i\ndone\n```\n\nThe above would print 10 through 1 to the screen. In the `then` are of your condition, replace the `echo` with a `for` loop that prints from your `$1` argument to `1`.",
          "hints": [
            "Use the same syntax as the example except change the `10` to `$1`",
            "Don't include any extra `echo` commands in the `then` area",
            "Your `then` area should look like this:\n```sh\nfor (( i = $1; i > 0; i-- ))\ndo\n  echo $i\ndone\n```"
          ]
        }
      ]
    },
    {
      "id": "630",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "630.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "def0ce460b720fb65eea9ede7b70077ffe4b61f6"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "640",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "640.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c4bb40c9877991bb55a92718c66c23b2a27012f7"
            ]
          },
          "content": "It works :smile: But I want it to pause for one second between each number. Check the `help` menu again.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "650",
      "title": "ls /",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "650.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d75ac44dd6cc7d9d1308ab35050adbad78305737"
            ]
          },
          "content": "I'm not seeing the command I was hoping to. These are the built-in commands, where are the rest? Type `ls /` to look around.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `ls /` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "660",
      "title": "ls /bin",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "660.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2d4ddee35804f01e0ed237063ad2588049d6f5f9"
            ]
          },
          "content": "The `/` listed what's in the root of the file system. I see a `bin` folder, `bin` stands for `binary`. View what's in it with `ls /bin`.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `ls /bin` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "670",
      "title": "man sleep",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "670.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ead76d1908b237451f0f996fcce3b6acdc59f989"
            ]
          },
          "content": "These are some non built-in commands. There's quite a few that should look familiar. One is `bash`, that's the one you used for the `shebang` in your scripts. I see one called `sleep` that might allow you to pause your script while it's counting down. View the manual of it.",
          "hints": [
            "View a manual with `man <command>`",
            "Enter `man sleep` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "675",
      "title": "sleep 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "675.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cf517d5cff9cc3968074493d01fa0bd77ce96552"
            ]
          },
          "content": "It says you can pause execution for a number of seconds. Try it out in the terminal by entering `sleep 3`.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Enter `sleep 3` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "680",
      "title": "Add sleep to for loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "680.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "19c0b79dacafb5230cab789b2e0321718a43a2d9"
            ]
          },
          "content": "In your `for` loop, use `sleep` to make the script pause for `1` second after each number is printed.",
          "hints": [
            "Add `sleep 1` after you print `i` in your `for` loop"
          ]
        }
      ]
    },
    {
      "id": "690",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "690.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "369a8f3a7a54c163decab441d3c08fab7a396f24"
            ]
          },
          "content": "Run your script and use `3` and the first argument again.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "692",
      "title": "Change to >=",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "692.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b40db1e750a383d5c0a4834dea0b72a1286c989e"
            ]
          },
          "content": "Change for loop to >=",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "694",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "694.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c678e40871944b05627a0a7dccfb0cbd18eeb1dc"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "696",
      "title": "Add echo -e \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "696.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a65d2d6585803ea72e3766a42b56223ebcfd5fd6"
            ]
          },
          "content": "Add `echo -e \"\\n~~ Countdown Timer ~~\\n\"`",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "698",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "698.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6144d962b9ed3e01d0309a2fa5672f20bfc1f9c6"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "700",
      "title": "Add Multiline comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "700.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ba910cb967daf3016a69f6549a4ad39b4ffae9e1"
            ]
          },
          "content": "Now it works like it should, you can create a multiline comment like this:\n\n```sh\n: '\n  comment here\n  more comment here\n'\n```\n\nComment out your `for` loop with a multiline comment. I want to try and do this with a `while` loop.",
          "hints": [
            "Comment out your `for` loop with a multiline comment"
          ]
        }
      ]
    },
    {
      "id": "710",
      "title": "Add I variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "710.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4c26ecf5bdba1505974be03249a4bd0582569092"
            ]
          },
          "content": "Below your comment, create a variable named `I` that is set to the value of your first argument.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "730",
      "title": "help while",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "730.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d5e349cea960b49cc623f9d88e8bef7a5e4e316f"
            ]
          },
          "content": "View the `help` menu for the `while` command to see if you can find anything.",
          "hints": [
            "Here's an example: `help <command>`",
            "Enter `help while` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "740",
      "title": "Add while loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "740.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a6a5fb0a02d862b8aa6c865f73957c958c5eea14"
            ]
          },
          "content": "You can make a `while` loop like this:\n\n```sh\nwhile [[ CONDITION ]]\ndo\n  STATEMENTS\ndone\n```\n\nEcho your `I` variable to the screen while `I` is greater than zero.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "750",
      "title": "Add sleep 1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "750.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "edc2279e72f0f8d27162c7448a559f35bbcff111"
            ]
          },
          "content": "Add `sleep 1`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "753",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "753.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a7db277d3e99b881a5762133b0a9a94af45e1c35"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "760",
      "title": "Add (( I-- ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "760.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f85ad6cf80fe01b79d51b5e1683bb8ed691d5642"
            ]
          },
          "content": "add `((I--))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "770",
      "title": "./countdown.sh 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "770.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fb32f19a54955d0b75e3ad872c9a10002f41321a"
            ]
          },
          "content": "Run the script and use 3 as the first argument.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "780",
      "title": "touch bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "780.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7f3e6dfef41d824b00ade58b62b439796d035ced"
            ]
          },
          "content": "I think the countdown clock is looking good. The next one is a bingo number generator. Use `touch` to create `bingo.sh` in the same folder as the others.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "790",
      "title": "chmod +x bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "790.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "34273f30cc105d89096cbdb6837c43037e550397"
            ]
          },
          "content": "Give your file executable permissions.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "800",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "800.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cd0def099939e7c52393c737d3e6f3ce20bfcee2"
            ]
          },
          "content": "Add a \"shebang\" at the top. It's the same as the other two files.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "810",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "810.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c85105d9ee36cacd707b4c5746f6abfeeba0eb4a"
            ]
          },
          "content": "Add a comment that says, `Bingo Number Generator`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "815",
      "title": "Add echo -e \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "815.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fa12830fe4d5719d3d3d29493496bb36ff7c9b37"
            ]
          },
          "content": "add echo -e \"\\n~~ Bingo Number Generator ~~\\n\"",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "820",
      "title": "Add NUMBER=5 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "820.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "64b48fb6b47438e60c1f9a6e89a90bdd97e19910"
            ]
          },
          "content": "NUMBER=5",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "830",
      "title": "echo $NUMBER",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "830.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "98e7c94d445776c9284fbdd9ac6990eb99b42a5e"
            ]
          },
          "content": "`echo (( $NUMBER ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "840",
      "title": "./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "840.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "828bf9f6cae17030f3d8773561d53c9685e26be6"
            ]
          },
          "content": "Run the script",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "845",
      "title": "help let",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "845.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6e04832bf4bcc08f73099523ba782d623209d32d"
            ]
          },
          "content": "`help let`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "850",
      "title": "Change to NUMBER=(( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "850.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b21abe1f1bc996d852626e3019b67b6fd04c986b"
            ]
          },
          "content": "change to `NUMBER=(( $RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "860",
      "title": "run ./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "860.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "62d33c3fa582171c4ace28b73f6179e091ae93ec"
            ]
          },
          "content": "Run the script",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "863",
      "title": "echo $RANDOM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "863.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bbf60f24f80edd96630506db4ee64e8f83791907"
            ]
          },
          "content": "`echo $RANDOM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "866",
      "title": "echo $RANDOM % 75",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "866.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8238aaf4707cd396f08f004b214175a3c320ab36"
            ]
          },
          "content": "`echo $RANDOM % 75`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "869",
      "title": "echo (( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "869.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ac14ddbe63acac7bd27c816fb00269be0dee701e"
            ]
          },
          "content": "`echo (( $RANDOM % 75 ))`. You should get an error.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "872",
      "title": "(( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "872.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fa1bf458e1c33047b051ea19430e020c1a7980c1"
            ]
          },
          "content": "`(( $RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "875",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "875.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cf61ec9645e1bab7a62d6c89ee63917d7511bcf9"
            ]
          },
          "content": "`echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "878",
      "title": "echo $(( RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "878.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "597d00e79c1af0fddc23543a116d5c104d708098"
            ]
          },
          "content": "`echo $(( RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "881",
      "title": "I=0",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "881.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bd1494f883014fa7a0983b8b8bd2d49839b146fc"
            ]
          },
          "content": "`I=0`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "884",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "884.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "75fbb0ffd9aa3c83ca4117caf21bd5b2f97a74fd"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "887",
      "title": "(( I++ ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "887.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c73007c714dea415f7727db2b14f2b0a3da4860d"
            ]
          },
          "content": "`(( I++ ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "890",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "890.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8cf8da2b1f16af40fd41243fe3e4391261744764"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "893",
      "title": "(( I += 10 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "893.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "428524b844a081127f1420f7633487bf11ca8ebc"
            ]
          },
          "content": "`(( I += 10 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "896",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "896.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "9f2f5171084efe95bb18c565a094405586aa6d53"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "899",
      "title": "echo $(( I + 4 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "899.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f8babdc9c4bbe419f43caa308d9a1581491b51ab"
            ]
          },
          "content": "`echo $(( I + 4 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "902",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "902.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2a8b355589790696d6036cec903e414613627693"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "905",
      "title": "J=$(( I - 6 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "905.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c39f982540abe74a8695bda84bd4b04dc8d57fe"
            ]
          },
          "content": "`J=$(( I - 6 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "908",
      "title": "echo $J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "908.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0c3c36cfdc3c165b9ac9fbb7bde83b4336cebdaf"
            ]
          },
          "content": "`echo $J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "911",
      "title": "echo $(( J * 5 + 25 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "911.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "59c7ba43601a2c13713ca89ef770a5a44bc76f65"
            ]
          },
          "content": "`echo $(( J * 5 + 25 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "912",
      "title": "echo $J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "912.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0f502994faa16b23c4cdac9c042e5520b423cf7b"
            ]
          },
          "content": "`echo $J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "914",
      "title": "declare -p J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "914.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8148c2d8aec03c2921ff5f860238577cf298a853"
            ]
          },
          "content": "`declare -p J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "916",
      "title": "declare -p RANDOM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "916.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6d86e7a8e639d29311e41e7b3893cf3439517fd1"
            ]
          },
          "content": "`declare -p RANDOM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "920",
      "title": "NUM=$(( RANDOM % 75 + 1 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "920.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ba95d487fcc33187264b73764e834c3d35c7047b"
            ]
          },
          "content": "`NUM=$(( RANDOM % 75 + 1 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "923",
      "title": "echo $NUM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "923.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "130701842747e41d141dcd96a8fc83a4750eaa1b"
            ]
          },
          "content": "`echo $NUM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "928",
      "title": "Set NUMBER=$(( RANDOM % 75 + 1))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "928.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0db72871e7f7a9540d86e731b834eb80cb02df82"
            ]
          },
          "content": "Change your number variable to `$(( RANDOM % 75 + 1 ))` and your echo statement to just echo $NUMBER again.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "930",
      "title": "run ./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "930.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2d2e853243590e5a6f7a695fd63dd1284e9e521c"
            ]
          },
          "content": "Run the script to make sure it's working",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "940",
      "title": "Add TEXT variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "940.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3e8b5654ee04583a5023d030ce190fea4030b8e3"
            ]
          },
          "content": "Create `TEXT=\"The next number is, \"`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "950",
      "title": "Add first if <= 15",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "950.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "9b29963d6868c69b53a4b1aecad7fbc0889f33ae"
            ]
          },
          "content": "Create `if (( $NUMBER <= 15 )) then echo $TEXT B:$NUMBER fi`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "960",
      "title": "Add elif < 31",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "960.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2cc66bdbf7ce581e8876b60ba5843a3b75a7adb6"
            ]
          },
          "content": "Add elif (( $NUMBER < 31 )) then",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "970",
      "title": "Add elif -le 45",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "970.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "760c2d0e568d03c06fa9db439cf8c611a3c80dd9"
            ]
          },
          "content": "Add elif [[ number -le 45 ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "980",
      "title": "Add elif -lt 61",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "980.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c8b9da7610802be6599506c6083c2bbb651a1d2"
            ]
          },
          "content": "elif [[ number -lt 61 ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1000",
      "title": "./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1000.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "43d4d9d38ff2385e9c039e818c867eba117aafb2"
            ]
          },
          "content": "Run your script a few times and make sure it's working.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1010",
      "title": "touch fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1010.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c6709d699f1be1aac08fe35ea9bfe2f164a34870"
            ]
          },
          "content": "Looks like it's working :smile: Next project is a fortune teller. Use the `touch` command to create `fortune.sh` in the same folder as the other scripts.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1020",
      "title": "chmod +x fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1020.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "716c8479c468bdab008df07d59352aa836ded8b9"
            ]
          },
          "content": "Change the permissions",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1030",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1030.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "13acf7be435187350256526d7ddc9742dc9d99a1"
            ]
          },
          "content": "Add a shebang",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1040",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1040.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1a85dfe89b36765937d54d254ea7b0b8472707bc"
            ]
          },
          "content": "Add comment `Program to tell a persons fortune`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1050",
      "title": "Add echo \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1050.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bd08d31aa27055b153b716c702a4531ce7a6ef2f"
            ]
          },
          "content": "Add echo `~~ Fortune teller ~~`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1060",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1060.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bf4293506f75ec4ee59dbf4710913e968a74b52c"
            ]
          },
          "content": "fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1070",
      "title": "ARR=(\"a\" \"b\" \"c\")",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1070.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a263e7e20a9971c44fdfbedf2a64de042939602f"
            ]
          },
          "content": "In terminal: ARR=(\"a\" \"b\" \"c\")",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1080",
      "title": "echo ${ARR[1]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1080.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "056fd5a7e3b1bd81f7a4124b18e578b666f58863"
            ]
          },
          "content": "`echo ${ARR[1]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1090",
      "title": "echo ${ARR[@]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1090.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "22d82a7cc7bfe45b38011f23d1f28a6ddb36bd4e"
            ]
          },
          "content": "`echo ${ARR[@]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1100",
      "title": "declare -p ARR",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1100.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f5a162c6cff8d2d98f10ae40ca4c6573d0000528"
            ]
          },
          "content": "`declare -p ARR`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1110",
      "title": "Add RESPONSES array",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1110.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "598eec3cedfc5be61fb5c17b1623dcfaa293a33f"
            ]
          },
          "content": "Create the array `RESPONSES=(\"Yes\" \"No\" \"Maybe\")` - but with all entries",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1120",
      "title": "echo ${RESPONSES[5]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1120.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a9108bc0cf4a93517fca561983a5db3b0f7149ef"
            ]
          },
          "content": "`echo ${RESPONSES[5]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1130",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1130.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "90c22e6c38e9b07e57d6c5d1b78e3adec20f7504"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1140",
      "title": "Add N=$((RANDOM % 7))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1140.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "493053925ea50599b4afb9197fd86664baf0b747"
            ]
          },
          "content": "Add `N=$((RANDOM % 7))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1150",
      "title": "Change to echo ${RESPONSES[$N]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1150.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a5b7c5154556dbf7eba2ff3ee86b9ebde7f250d7"
            ]
          },
          "content": "Change to `echo ${RESPONSES[$N]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1160",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1160.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c62294f3d29eea3005a491e4e829c4be33a8766"
            ]
          },
          "content": "`help`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1170",
      "title": "help function",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1170.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e796e0c788906480e2f9ffa0fe22a6133fbec5ba"
            ]
          },
          "content": "`help function`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1180",
      "title": "Add GET_FORTUNE function",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1180.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "56590a29bc896d72b367e838cca946afcf0bb065"
            ]
          },
          "content": "Add `GET_FORTUNE` function.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1190",
      "title": "Add echo Ask a yes or no question",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1190.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "848374d20a0f467ca4143e1976cd8e3e6beb25f9"
            ]
          },
          "content": "Add echo ask a yes or no question",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1200",
      "title": "Add GET_FORTUNE function call",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1200.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4bf3ba25e77644070a539504671ceba72503aae1"
            ]
          },
          "content": "Add `GET_FORTUNE` function call.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1210",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1210.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7b7810fa6f84828e08c6d0ed274de46447cf0a92"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1220",
      "title": "Add read QUESTION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1220.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "54c0c764bc16b78cc65c7f3d42d9271e4f6737c7"
            ]
          },
          "content": "Add `read QUESTION`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1230",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1230.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2cebf566d4f6ae3850dac2a10a52d81c2bbcf7ef"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1240",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1240.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3d1d076b4a5117f5045e2207691db53f6ff46029"
            ]
          },
          "content": "help",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1250",
      "title": "help until",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1250.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4d823dea832ba2cf2a027b3df3e910bd91857262"
            ]
          },
          "content": "`help until`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1260",
      "title": "Add until loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1260.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "75672df22ddec4faaa5c499fbc10cc204f004499"
            ]
          },
          "content": "Add until [[ question == \"test?\" ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1270",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1270.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "07660c84a07cef93eb8f1ec7aff9cbdd8416bc53"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1280",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1280.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5ee39befdd38577187537a8e6ec4289bb2a8a631"
            ]
          },
          "content": "`help [[ expression ]]`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1290",
      "title": "[[ hello == hello ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1290.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3ddbe883b090ba9f5ea1612963e4d092d93eb47e"
            ]
          },
          "content": "`[[ hello == hello ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1300",
      "title": "[[ hello == world ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1300.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "979c4c2882f7504d33030e61dacf1a9983b35e0b"
            ]
          },
          "content": "`[[ hello == world ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1310",
      "title": "[[ hello =~ el ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1310.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6d3943c55b8111d427a81f200746a9a303e1df92"
            ]
          },
          "content": "`[[ hello =~ el ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1320",
      "title": "[[ \"hello world\" =~ \"ello\" ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1320.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3662985e0aacc441297dd6b82b4be77e68ac9aad"
            ]
          },
          "content": "`[[ \"hello world\" =~ \"ello\" ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1330",
      "title": "[[ \"hello world\" =~ ^h ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1330.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bc875c59e4f736a6938c4e76f6fc54a522bfccd9"
            ]
          },
          "content": "`[[ \"hello world\" =~ ^h ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1340",
      "title": "[[ \"hello world\" =~ ^h.+d? ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1340.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8abcfe689436bc873548dd7356fdfa494a8a0635"
            ]
          },
          "content": "`[[ \"hello world\" =~ ^h.+d? ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1350",
      "title": "VAR=\"hello world\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1350.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "65be8518f8c5b03cb2562f5f39117e7cd1ce7cee"
            ]
          },
          "content": "`VAR=\"hello world\"`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1360",
      "title": "echo $VAR",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1360.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "38b12551c0340b0c3063e8c05bdcac69b6c3c886"
            ]
          },
          "content": "`echo $VAR`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1370",
      "title": "[[ $VAR == \"hello world\" ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1370.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d1deb44374709c4e3c6d9b81191c7680bd47d18a"
            ]
          },
          "content": "`[[ $VAR == \"hello world\" ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1380",
      "title": "[[ $VAR =~ \\?$ ]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1380.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "da099d64bf978fb9a76641f91bc4c6e957198e20"
            ]
          },
          "content": "`[[ $VAR =~ \\?$ ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1390",
      "title": "Change until condition",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1390.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "83f6bf664158948af4b12fd6ef2447cd111ede06"
            ]
          },
          "content": "Change until condition to see if it ends in a `?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1400",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1400.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5531fc1292c46f9594586ce605b005a19d2ed197"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1410",
      "title": "Add if to GET_FORTUNE",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1410.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "91027861e4a5fc101768356ab005cdcdabeed7de"
            ]
          },
          "content": "Add `if` to `GET_FORTUNE`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1420",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1420.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "da1fc5ce3430e68b214debd7d8d03bff9eb9423f"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1430",
      "title": "touch five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1430.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2289848517e11de32eaca0e43839ff032befdb33"
            ]
          },
          "content": "`touch five.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1440",
      "title": "chmod +x five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1440.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a726977749077327ac4a8a2826037ab49b07280a"
            ]
          },
          "content": "chmod +x five.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1450",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1450.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "360b86b15683c40e69c3c5864636b7d1b975db32"
            ]
          },
          "content": "Add shebang",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1460",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1460.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f02b702d193f0f34dde2538fcbfce98333b9af45"
            ]
          },
          "content": "add comment 'program to run my other four programs'",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1470",
      "title": "Add ./questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1470.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a64bf871b1dfb81489a8daacbd81670cc64ebf11"
            ]
          },
          "content": "Add questionnaire.sh to the file",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1480",
      "title": "./five",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1480.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e20b304cd1552b29c6405d2e1a6de991651e350d"
            ]
          },
          "content": "./five",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1490",
      "title": "Add the rest of the scripts",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1490.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f6b5240d855371902acc373754b31e66fb8df5e4"
            ]
          },
          "content": "Add the rest of the scripts to the file",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1500",
      "title": "Clear",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1500.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "621eaca626d1dd8731cbdc26247533473ed63530"
            ]
          },
          "content": "clear",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1510",
      "title": "./five",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1510.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a8cf8a1e4b8bc266afbe8ebf837f9b5364604b88"
            ]
          },
          "content": "./five",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1520",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1520.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "9752ea03ee97d348af9c6f18ac7e2e3864382946"
            ]
          },
          "content": "help",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1530",
      "title": "help type",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1530.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1ff57d9bf41d0c6b1afbfcc57e742c3c4877b573"
            ]
          },
          "content": "help type",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1540",
      "title": "type echo",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1540.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5b0157081d112cb06c9c19821099ec3a5e1fb56b"
            ]
          },
          "content": "type echo",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1550",
      "title": "type read",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1550.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c0d4acd10039cb9929de41a8004dcfa5acd54ca"
            ]
          },
          "content": "help type",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1560",
      "title": "type if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1560.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f81f4d365081ae688aba15bfe2ee91556e38804a"
            ]
          },
          "content": "type if",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1570",
      "title": "type then",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1570.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f6c271825bf15c023a8d0834e9788aff4389d941"
            ]
          },
          "content": "type then",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1580",
      "title": "type bash",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1580.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c8fa5baf9d6218c4ab86ec4d1ac8ea1bfe32f28"
            ]
          },
          "content": "type bash",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1590",
      "title": "type psql",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1590.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d870be99d18c13b5f8f7656ba0b5f72001801426"
            ]
          },
          "content": "type psql",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1600",
      "title": "type ./five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1600.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d553c5ad9397ad35b1a33c4504da3f37c4dc0813"
            ]
          },
          "content": "type ./five.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1610",
      "title": "exit",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1610.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b9121802a8eaed0003713bbc2a748de5fca77f25"
            ]
          },
          "content": "exit",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    }
  ]
}