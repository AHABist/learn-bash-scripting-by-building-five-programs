{
  "version": "0.1.4",
  "summary": {
    "title": "Learn Bash Scripting by Building Five Programs",
    "description": "> Welcome to the Bash Scripting lessons!"
  },
  "config": {
    "setup": {
      "commands": [
        "cd .freeCodeCamp && npm install",
        "sudo cp ~/project/.freeCodeCamp/.bashrc ~"
      ],
      "commits": [
        "06ef601391f2acd494a45223a53c0fbd4f97f6ca"
      ]
    },
    "testRunner": {
      "command": "./node_modules/.bin/mocha",
      "args": {
        "tap": "--reporter=mocha-tap-reporter"
      },
      "directory": ".freeCodeCamp"
    },
    "repo": {
      "uri": "https://github.com/moT01/.learn-bash-scripting-by-building-five-programs",
      "branch": "v0.1.4"
    },
    "dependencies": [
      {
        "name": "node",
        "version": ">=10"
      }
    ]
  },
  "levels": [
    {
      "id": "10",
      "title": "Start the Terminal",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "10.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cdeb0943cb10e468df53c6dc626ea4d57959b138"
            ]
          },
          "content": "**The first thing you need to do is start the terminal.** Do that by clicking the \"hamburger\" menu at the top left of the screen, going to the \"terminal\" section, and clicking \"new terminal\". Once you open a new one, type `echo hello bash` into the terminal and press enter.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "20",
      "title": "touch questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "20.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "812001d1fa24d7783ad8d5e3626ed81164aae19d"
            ]
          },
          "content": "You can run commands in the terminal or put them in a file to be run as a script. You will be making five small programs to learn some scripting. The first one will be a \"questionnaire\". Use the `touch` command to create `questionnaire.sh` in the `project` folder.",
          "hints": [
            "Type `touch questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "30",
      "title": "Add echo questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "30.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "30449e138bd52a8797a9d82d279bc48d7233ddcd"
            ]
          },
          "content": "To start, just add `echo Hello Questionnaire` at the top of the file you just created.",
          "hints": [
            "Add the suggested text to the `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "35",
      "title": "sh questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "35.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8a1858508b7e68d41c1df3806bc9a40d2ff0c1a3"
            ]
          },
          "content": "Your script has one command. Run it with `sh questionnaire.sh` to see what happens. `sh` stands for `shell`.",
          "hints": [
            "Type `sh questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "40",
      "title": "bash questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "40.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b3b17a323ea99cb50fadcebb778370c7af36b643"
            ]
          },
          "content": "When you ran the script, the `shell` interpreter was used. Run your script again with `bash questionnaire.sh` to use the `bash` interpreter. `bash` stands for `bourne-again shell`.",
          "hints": [
            "Type `bash questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "50",
      "title": "which bash",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "50.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b7068ebebc17f8e1efcf2b202fbba66c77a03135"
            ]
          },
          "content": "The output was the same, but there are many other interpreters which may not give the output you expect. Find out where the `bash` interpreter is located by entering `which bash` in the terminal.",
          "hints": [
            "Type `which bash` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "60",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "60.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "88da3c2f78844dd1acbeaaae2fd09db641f9ecfe"
            ]
          },
          "content": "That's the absolute path to the `bash` interpreter. You can tell your program to use it by placing a \"shebang\" at the very top of the file like this: `#! <path_to_interpreter>`. Add a \"shebang\" at the top of your file, the one you want looks like this: `#!/bin/bash`.",
          "hints": [
            "Add `#!/bin/bash` at the top of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "70",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "70.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "072cde8c7392622ec1174ab3ed112436eeb181bf"
            ]
          },
          "content": "Now, instead of using `sh` or `bash` to run your script. You can run it be executing the file and it will default to `bash`. Run your script by executing it with `./questionnaire.sh`",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "80",
      "title": "ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "80.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "478f9ad01afb5984aa05ddf83d8fd512feab96c8"
            ]
          },
          "content": "You should have got a permission denied message. List what's in the `project` folder in long list format with `ls -l`.",
          "hints": [
            "Type `ls -l` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "90",
      "title": "chmod +x questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "90.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "75b58831cc4d661aa4c8dfa5ca08482723911820"
            ]
          },
          "content": "You should see `-rw-r--r--` next to your file. All but the first character (`-`) describe permissions certain users have with the file. I don't see an `x` anywhere, so nobody can execute it. Enter `chmod +x questionnnaire.sh` in the terminal to give everyone executable permissions.",
          "hints": [
            "Type `chmod +x questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "100",
      "title": "ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "100.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c7515b0a4d3b8624933b21e79983fc12e202bbd8"
            ]
          },
          "content": "List what's in the folder again with `ls -l` to see the new permissions.",
          "hints": [
            "Type `ls -l` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "110",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "110.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1b0f0919b51fc0fcffe73e9ed10d3eb040a75602"
            ]
          },
          "content": "The `x` was added by each type of user to denote that anyone can execute the file. Run your file again by executing it with `./questionnaire.sh`.",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "140",
      "title": "Add ls -l",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "140.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "830125cb8c828df0befc38e2aef7cd60582f09dc"
            ]
          },
          "content": "Now it works. In your script, you can add any commands that you would be able to enter in the terminal. Test this by adding the `ls -l` command below your other command.",
          "hints": [
            "Add `ls -l` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "150",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "150.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f262cbb014aed77c84d9cd4cd9d9227699021332"
            ]
          },
          "content": "Run the script by executing it again.",
          "hints": [
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "160",
      "title": "Delete all - shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "160.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "75b0d052d920f15831791ce278eefbfd07e8b08e"
            ]
          },
          "content": "Your script printed the one file as if you entered the `ls -l` in the terminal. Delete everything but the \"shebang\" from your file so you can start making the questionnaire.",
          "hints": [
            "Only `#!/bin/bash` should remain in your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "170",
      "title": "Add QUESTION1 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "170.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "941c7c600538b789bf37418aa32ad15e06d9c9ac"
            ]
          },
          "content": "Bash has variables, functions, and other things you might be familiar with. You can create a variable with `VARIABLE_NAME=VALUE`. There cannot be any spaces around the equal (`=`) sign. If a variable has any spaces in it, place double quotes around it. Create a variable named `QUESTION1` and set it's value to `\"What's your name?\"`.",
          "hints": [
            "Add `QUESTION1=\"What's your name?\"` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "180",
      "title": "Add echo $QUESTION1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "180.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "01dd97fc13ba8a861275d97dc84551c8205114ad"
            ]
          },
          "content": "To use a variable, place `$` in front of it like this: `$VARIABLE_NAME`. Shell scripts run from top to bottom, so you can only use variable below where it's created. Use `echo` to print your variable.",
          "hints": [
            "Add `echo $QUESTION1` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "190",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "190.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4b84631176ed0a859fb31a9716065c08f1d5acde"
            ]
          },
          "content": "Run the file like you did before to see if it worked.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "200",
      "title": "Add read NAME",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "200.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3661311527dc76a5a755e6a6f93e65c3db4d90dd"
            ]
          },
          "content": "The question was printed. Next, you want to be able to accept input from a user. You can do that with `read` like this: `read VARIABLE_NAME`. This will get user input and store it into a new variable. Use `read` to get input and store it in a variable named `NAME`.",
          "hints": [
            "Add `read NAME` at the bottom of your `questionnaire.sh` file"
          ]
        }
      ]
    },
    {
      "id": "210",
      "title": "Add echo Hello $NAME",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "210.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "395cac83bcd0158feeed6f5b52ad2d1ee1da1048"
            ]
          },
          "content": "At the bottom of your script, use `echo` to print `Hello, <name>.` to the terminal.",
          "hints": [
            "Use your `$NAME` variable in place of `<name>`",
            "Add `echo Hello, $NAME.` at the bottom of your script"
          ]
        }
      ]
    },
    {
      "id": "220",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "220.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8b5fe85b8ec7e2fae831a4ad5f570699a3e93179"
            ]
          },
          "content": "Run the file again. Type your name and press enter after it asks for it.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "230",
      "title": "Add QUESTION2 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "230.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7db9bf7dcf04b8b9231f51c3c1609e2b1f6e230f"
            ]
          },
          "content": "Right below your first variable, create another one named `QUESTION2`. Set the value to, `Where are you from?`. Make sure to put it in double quotes.",
          "hints": [
            "Here's an example: `VARIABLE=\"value\"`",
            "Add `QUESTION2=\"Where are you from?\"` to your script"
          ]
        }
      ]
    },
    {
      "id": "240",
      "title": "Add echo $QUESTION2",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "240.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "88d86ee27a9971e82deec88c67701548a05be640"
            ]
          },
          "content": "Use your new variable to print the next question after your `read` command.",
          "hints": [
            "Use `echo` to print the variable",
            "Add `echo $QUESTION2` below everything else"
          ]
        }
      ]
    },
    {
      "id": "250",
      "title": "Add read LOCATION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "250.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e2ef2b69adb64c7fefe6bb65ee74bb53b7f6f2a7"
            ]
          },
          "content": "Use `read` to get input from the user into a variable named `LOCATION`.",
          "hints": [
            "Add `read LOCATION` to your script below everything else"
          ]
        }
      ]
    },
    {
      "id": "260",
      "title": "Add echo Hello $NAME from $LOCATION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "260.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d1969e9e85f0c4e309e23ccf60afb36b5e80a3f5"
            ]
          },
          "content": "Change the existing response of `\"Hello $NAME` to `\"Hello <name> from <location>.\"`. Use your two variables in place of `<name>` and `<location` and make sure the command is at the bottom of the file.",
          "hints": [
            "The suggested command should look like: `echo Hello $NAME from $LOCATION.`"
          ]
        }
      ]
    },
    {
      "id": "270",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "270.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "dd9d30d06fe0e0a1b3cad46d82ebf33e4228c561"
            ]
          },
          "content": "Run the script and enter values when it is waiting for input.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "280",
      "title": "Add echo \"~~ Questionnaire ~~\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "280.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5dbf5270f73a01dc3f12372aef0bab6512192231"
            ]
          },
          "content": "Add a title to your program for me. Use `echo` to print `~~ Questionnaire ~~` before anything else is printed.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "290",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "290.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "580d9c9f6631baa2393c53e4a6cedbc9e347ede2"
            ]
          },
          "content": "Run the script and enter values until it is done again so you can see what the title looks like.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "300",
      "title": "echo --help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "300.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6d54cc2cd46dc4e455474d0fc59e5e819fd8a01b"
            ]
          },
          "content": "It would be nice if there was some new lines around the title. You've probably used the `--help` flag before, see if you can use it with `echo` to try and find a way to add empty lines.",
          "hints": [
            "Type `echo --help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "310",
      "title": "man echo",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "310.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a3dd2415d3c916c2bcd4436fa34bc521fd8db19f"
            ]
          },
          "content": "That didn't work as I hoped. Another way to find information about a command is with `man`. It stands for `manual` and you can use it like this: `man <command>`. See if there's a manual for `echo`.",
          "hints": [
            "Type `man echo` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "320",
      "title": "Add echo -e \\n~~ Questionnaire ~~\\n",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "320.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "50d686beba047ea4373acae639f0fe795bc8706c"
            ]
          },
          "content": "That `-e` option looks promising, and the `\\n` below it says `new line`. Change the title command to `echo -e \\n~~ Questionnaire ~~\\n` to put an empty line before and after it.",
          "hints": [
            "Change the suggested line to `echo -e \\n~~ Questionnaire ~~\\n`"
          ]
        }
      ]
    },
    {
      "id": "323",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "323.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7c6ec63fe48e053b0dfcddec1f4f694084146696"
            ]
          },
          "content": "Run it to see if it worked. You can press `ctrl+c` to close the program after it starts if you don't want to enter values.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "326",
      "title": "Change to echo -e \"\\n~~ Questionnaire ~~\\n\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "326.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "632aff2e26695ed3e2c6371d9eef86a70722f34d"
            ]
          },
          "content": "Didn't work. When using patterns like `\\n`, you need to enclose the string in double quotes (`\"<string>\"`). Place double quotes around the title to see it will print the empty lines.",
          "hints": [
            "Change the suggested line to `echo -e \"\\n~~ Questionnaire ~~\\n\"`"
          ]
        }
      ]
    },
    {
      "id": "330",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "330.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7296168b8965c29576c9bdfbf62e08abdc4a1067"
            ]
          },
          "content": "Try running it again to make sure it worked.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there",
            "You can press `ctrl+c` to close the program"
          ]
        }
      ]
    },
    {
      "id": "340",
      "title": "Add QUESTION3 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "340.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e1c5443732fb81e8225fbcb706a6e59c94b095f7"
            ]
          },
          "content": "It's working :smile: Create a `QUESTION3` variable next to the other ones and set the value to `\"What's your favorite coding website?\"`",
          "hints": [
            "Add `QUESTION3=\"What's your favorite coding website?\"` by the other variables"
          ]
        }
      ]
    },
    {
      "id": "345",
      "title": "Add QUESTION3 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "345.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3bf16129f872aab60083e3e2db21cb9006d3fa16"
            ]
          },
          "content": "Use `echo` to print the third question after the other two.",
          "hints": [
            "Add `echo $QUESTION3` below the `read LOCATION`"
          ]
        }
      ]
    },
    {
      "id": "350",
      "title": "read WEBSITE",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "350.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0252f1e1910a9b36e702ef25d9df42642cb74208"
            ]
          },
          "content": "Add code to `read` input into a variable named `WEBSITE`.",
          "hints": [
            "Add `read WEBSITE` below where you printed your third question"
          ]
        }
      ]
    },
    {
      "id": "360",
      "title": "echo final sentence",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "360.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bc90b2fa3de12645de61f5f2a601411f437cc9ea"
            ]
          },
          "content": "In your response, instead of printing the users name and location, change the `echo` command to print this sentence: `Hello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!`.",
          "hints": [
            "The command should look like this: `echo Hello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!`"
          ]
        }
      ]
    },
    {
      "id": "363",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "363.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "dd3e0ac212105a68403cbe7ecc26d3fe394ea043"
            ]
          },
          "content": "Run the script and enter values when the program is waiting. Lets see the final output.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "366",
      "title": "Add line breaks around final sentence",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "366.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0680f28de10725692482ce1cc2ab29a1fe8b63ab"
            ]
          },
          "content": "One last thing. Change that final sentence to print an empty line before it like you did for the title.",
          "hints": [
            "Use the `echo` command with the `-e` flag and a newline (`\\n`) character",
            "Here's an example: `echo -e \"\\n<message>\"`",
            "The final command should look like this: `echo \"\\nHello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!\"`"
          ]
        }
      ]
    },
    {
      "id": "370",
      "title": "./questionnaire",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "370.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0b2f24477201fd89d75361cc1d2f89da1a9c05fe"
            ]
          },
          "content": "Run it one last time and enter values when it asks to see if you like how it looks.",
          "hints": [
            "Run your file by executing it",
            "Type `./questionnaire.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "380",
      "title": "touch countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "380.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b5c6241e26c6611f19cf5f73ac89139f835ceca3"
            ]
          },
          "content": "Looks good. I think you are done that script for now. Use the `touch` command to create a new file named `countdown.sh` in your `project` folder. This program will count down from a given input.",
          "hints": [
            "Type `touch countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "390",
      "title": "chmod +x countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "390.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "17f7117d091bb1abc3cf138e4f84f1452cce4cae"
            ]
          },
          "content": "Give your file executable permissions so you can run it like the other one. It's the `chmod` command.",
          "hints": [
            "Here's an example `chmod <permissions> <filename>`",
            "The value for permissions you want to use is `+x`",
            "You previously used `chmod +x questionnaire.sh`",
            "Type `chmod +x countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "400",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "400.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "688c88a6d8feaf214fe75566750915da132a7106"
            ]
          },
          "content": "You want to use the `bash` interpreter again. Add a `shebang` at the top of your new file to denote that.",
          "hints": [
            "A `shebang` looks like this: `#!<path_to_interpreter>`",
            "Enter `which bash` in the terminal to see where `bash` is located",
            "Look at the `shebang` in your first script to get the syntax",
            "It should look like this: `#!/bin/bash`",
            "Add `#!/bin/bash` at the top of your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "410",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "410.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "db33d0063df064a8308e117b55efc651d83dcecb"
            ]
          },
          "content": "Comments in `bash` look like this: `#<comment>`. Add a comment below the `shebang` that says `Program that counts down to zero from a given argument` so people know what it does.",
          "hints": [
            "Add `#Program that counts down to zero from a given argument` to your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "420",
      "title": "Add echo $*",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "420.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "13af7ae570155d814e8d69410b9834b5c1e26867"
            ]
          },
          "content": "Programs can take arguments. You can access them a few different ways with `$`. Add `echo $*` in your script to print all arguments passed to it.",
          "hints": [
            "Add `echo $*` at the bottom of the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "425",
      "title": "./countdown.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "425.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b9ddefff8942d98454ad0af84d40a9ff00e92be0"
            ]
          },
          "content": "Execute your script with `./countdown.sh`.",
          "hints": [
            "Type `./countdown.sh` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "430",
      "title": "./countdown.sh arg1 arg2 arg3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "430.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f7c9ca33d7b348bf07437ad05f05ff1caf516398"
            ]
          },
          "content": "Nothing was printed. Run your script again, but this time add three arguments to the command; `arg1`, `arg2`, and `arg3`. Place them after the command with a space before each one.",
          "hints": [
            "Type `./countdown.sh arg1 arg2 arg3` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "440",
      "title": "Change to echo $2",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "440.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6bf9d33a83a20e58929dac49faf7861dc4257e3d"
            ]
          },
          "content": "`$*` printed all the arguments passed to your script. To access any one of them, use `$<number>`. `arg1` could have been accessed with `$1`. Change your script to `echo` the second argument instead of all the arguments.",
          "hints": [
            "Use `echo $2` to print the second argument",
            "Change `echo $*` to `echo $2` in your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "450",
      "title": "./countdown.sh arg1 arg2 arg3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "450.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "84eaead9133a29218824b6370c5ce019908bb658"
            ]
          },
          "content": "Run your file with `./countdown.sh arg1 arg2 arg3` again.",
          "hints": [
            "Type `./countdown.sh arg1 arg2 arg3` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "460",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "460.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fcb4e7b92f8612c25e4f58970d42ef06b95c8a00"
            ]
          },
          "content": "Now it just prints the second argument. Your program will only need one argument, you will add an `if` statement to test it. I wonder what the syntax would look like. Type `help` in the terminal to see if you can find anything.",
          "hints": [
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "470",
      "title": "man if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "470.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a8fdf792b3a335fb2ebacbe31ac2e1b708fb3455"
            ]
          },
          "content": "This is a list of the built-in commands. One of them starts with `if`. See if you can find out more about it by checking its `man` page.",
          "hints": [
            "Here's an example: `man <command>`",
            "Type `man if` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "480",
      "title": "help if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "480.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3c7a33349ffab49f4511c2d592e1cf2ab031de6f"
            ]
          },
          "content": "I guess there isn't a `man` page for it. At the top of the `help` screen, I noticed you can use `help <command>` to find out more. Yet another way to find out about a command. See if you can find out more about `if`.",
          "hints": [
            "Here's an example `help <command>`",
            "Type `help if` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "490",
      "title": "Add if arg1 print true",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "490.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "553cfbb0b62970118cf97dad734ddca0695a1b29"
            ]
          },
          "content": "The syntax is at the top, not all of it is required. Here's another example:\n\n```sh\nif [[ CONDITION ]]\nthen\n  STATEMENTS\nfi\n```\n\nRemove the `echo $2` in your new script and replace it with an `if` condition that checks `if [[ $1 == \"arg1\" ]]`. In its `then` area, use `echo` to print `true` to the screen.",
          "hints": [
            "Add the following to your `countdown.sh` file:\n```sh\nif [[ $1 == \"arg1\" ]]\nthen\n  echo true\nfi\n```"
          ]
        }
      ]
    },
    {
      "id": "500",
      "title": "./countdown arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "500.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0f9341ec4fd620d593a2b7b02b49317aa662f892"
            ]
          },
          "content": "The `if` statement will print `true` if you pass `arg1`. Notice that the end of the syntax is `fi` (`if` backwards). Run the script again with `arg1` as the only argument.",
          "hints": [
            "Type `./countdown.sh arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "505",
      "title": "./countdown !arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "505.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "dae141735b6fc66a7d257637601925604fde832a"
            ]
          },
          "content": "Run it again with anything except `arg1` as the first argument.",
          "hints": [
            "Type `./countdown.sh !arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "510",
      "title": "Add else print false",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "510.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bb286ac46338cfb84d1e752f1f469a2d30b4f46a"
            ]
          },
          "content": "One of the optional parts of `if` was an `else` area. You can use it like this:\n\n```sh\nif [[ CONDITION ]]\nthen\n  STATEMENTS\nelse\n  STATEMENTS\nfi\n```\n\nAdd an `else` to your existing `if` condition. Use `echo` to print `false` to the terminal in its `STATEMENTS` area.",
          "hints": [
            "Add the following to your script:\n```sh\nif [[ $1 == \"arg1\" ]]\nthen\n  echo true\nelse\n  echo false\nfi\n```"
          ]
        }
      ]
    },
    {
      "id": "520",
      "title": "./countdown !arg1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "520.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4665fd467b4a56a491833f89e30dfcff38fa57f1"
            ]
          },
          "content": "Run the script again and use anything except `arg1` as the only argument.",
          "hints": [
            "Type `./countdown.sh !arg1` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "530",
      "title": "Change if condition -lt 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "530.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4d02de2cf828553103e226af3b6631cb7479ad20"
            ]
          },
          "content": "Your program is expecting an integer to count down from as its argument. You can compare integers inside the brackets (`[[ ... ]]`) of your `if` with `-eq` (equal), `-ne` (not equal), `-lt` (less than), `-le` (less than or equal), `-gt` (greater than), `-ge` (greater than or equal). Change your `if` condition to check if your first argument is less than `5`.",
          "hints": [
            "Your `if` condition should look like this: `[[ $1 -lt 5 ]]`",
            "It's the one in the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "540",
      "title": "./countdown 4",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "540.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c59013c192c5ed402d87a114b20bd5b8b1d0bd81"
            ]
          },
          "content": "Run the script again and use `4` as a first argument.",
          "hints": [
            "Type `./countdown.sh 4` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "542",
      "title": "./countdown 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "542.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e25c162e7f0241c609d64a03a18743255544228c"
            ]
          },
          "content": "It printed `true` since your argument was less than `5`. Run the script again and use `5` as a first argument.",
          "hints": [
            "Type `./countdown.sh 5` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "544",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "544.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fd5ed5198ef5c9a2c9d8c4f789916a914c5c005a"
            ]
          },
          "content": "As expected, that printed `false`. Take a look at that `help` menu again. I want to see if we can find out more about how these expressions work.\n help",
          "hints": [
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "546",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "546.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0e94cb95d3fd4b90feaddbae3f5bc2512a3fc8a5"
            ]
          },
          "content": "Near the top left, it says `[[ expression ]]`. See if you can get more info about that with the `help` command like you did with `help if`.",
          "hints": [
            "Here's an example: `help <command>`",
            "Type `help [[ expression ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "548",
      "title": "help test",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "548.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6050d2363f85f068549b5560bab95a6af2d48095"
            ]
          },
          "content": "There's some good info there. Looks like you can use some, probably familiar, things like `&&`, `||`, `==` and `!=`. It says something about the `test` built-in command. See if you can bring up the `help` menu for that.",
          "hints": [
            "View the `help` menu of the suggested command like you did before",
            "Here's and example: `help <command>`",
            "Type `help test` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "550",
      "title": "Change if to [[ $1 -le 5 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "550.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4852241cdaa1cad0ba3f2bd9d5ecdb7a4c02703e"
            ]
          },
          "content": "That's what I was looking for. At the top is some operators to use with files. There's some string and other operators as well. You used the arithmetic operators with your `if` condition. Change the condition in your script to check if the first argument is less than or equal to `5`.",
          "hints": [
            "The `if` condition should look like this: `[[ $1 -le 5 ]]`",
            "It's the `if` in your `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "552",
      "title": "./countdown 5",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "552.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "69d340f16f8bda6d1136019d10ba9799841ace63"
            ]
          },
          "content": "Run the script again and use `5` as a first argument again.",
          "hints": [
            "Type `./countdown.sh 5` in the terminal and press enter",
            "Make sure you are in the `project` folder first",
            "Enter `cd ~/project` in the terminal to get to the project folder if you aren't there"
          ]
        }
      ]
    },
    {
      "id": "554",
      "title": "[[ 0 -le 5 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "554.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4aa9362708b78491e055f222902f5d4826198753"
            ]
          },
          "content": "Now it prints `true`. Remember I said any command can run in the terminal or a script. Try running an expression right in the terminal by entering `[[ 0 -le 5 ]]` in it.",
          "hints": [
            "Enter the suggested expression in the terminal",
            "Type `[[ 0 -le 5 ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "556",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "556.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ba236d0630704268a0c70bca6921120096c04aa2"
            ]
          },
          "content": "Nothing happened. Each command has an exit status that can be accessed with `$?`. View the exit status of the **last command** with `echo $?`.",
          "hints": [
            "Type `echo $?` in the terminal and press enter",
            "Your second to last command should be `[[ 0 -le 5 ]]` so enter that before `echo $?` if you entered something in between them"
          ]
        }
      ]
    },
    {
      "id": "558",
      "title": "[[ 5 -lt 0 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "558.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "21a233197c9bdd314c85a798fde9516467d51f5e"
            ]
          },
          "content": "The exit status of `0` means it was true, `0` is indeed less or equal to `5`. Try it again with `[[ 5 -lt 0 ]]`.",
          "hints": [
            "Enter the suggested expression in the terminal",
            "Type `[[ 0 -lt 5 ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "560",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "560.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8bfaed18c118cc38a0af89ca0ae8e078992a7364"
            ]
          },
          "content": "Echo the exit status of the command you just entered.",
          "hints": [
            "Type `echo $?` in the terminal and press enter",
            "Your second to last command should be `[[ 5 -lt 0 ]]` so enter that before `echo $?` if you entered something in between them"
          ]
        }
      ]
    },
    {
      "id": "562",
      "title": "[[ 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "562.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "31e6c737541cc2fc9f1507b84c2363e3e70a55d5"
            ]
          },
          "content": "It printed `1` this time for false. You can separate commands on a single line with `;`. Enter your last two commands on one line like this: `[[ 5 -lt 0 ]]; echo $?`. It will run the expression, then print the exit status of it since it was the last command.",
          "hints": [
            "Type `[[ 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "564",
      "title": "[[ 10 -gt 1 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "564.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6ce5d66da6e9425f950c41c3a1aebcfe2aa81c44"
            ]
          },
          "content": "Using the same syntax of `[[ ... ]]; echo$?`, check if `10` is greater than (`-gt`) `1` and print the exit status of the expression on one line.",
          "hints": [
            "You previously used `[[ 5 -lt 0 ]]; echo $?`",
            "Type `[[ 10 -gt 1 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "566",
      "title": "bad_command; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "566.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ea45bec15ce26365fae46aa94521f9e37f81b01f"
            ]
          },
          "content": "You can think of the exit status of `0` as true. But, more accurately, it means that the command had zero errors. All commands have an exit status. Using the same sytax, enter `bad_command;` and check its exit status on a single line.",
          "hints": [
            "You previously used `[[ 10 -gt 1 ]]; echo $?`",
            "Type `bad_command; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "568",
      "title": "ls; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "568.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a97eb03e6da3388d3dfa9def577f67f72c21bed4"
            ]
          },
          "content": "`Command not found`, with an exit status of `127`. Anything but `0` means there was an error with the command. `bad_command` didn't exist. Try it again with `ls`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example `<command>; echo $?`",
            "You previously used `bad_command; echo $?`",
            "Type `ls; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "570",
      "title": "ls -y; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "570.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5861b75e57eada90bccb7446f9c7eb3df6589a38"
            ]
          },
          "content": "The command executed as expected and there were zero errors. So it gave you an exit status of `0`. Try it again with `ls -y`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example: `<command>; echo $?`",
            "You previously used `ls; echo $?`",
            "Type `ls -y; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "572",
      "title": "help test",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "572.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "aa5054395c1942dfe53c8536d4f912fefc90aa38"
            ]
          },
          "content": "The `-y` flag doesn't work with `ls` so it gave you an exit status code of `2`, meaning that the command was unsuccessful. View the `help` menu of the `test` command again, I want to see what else is in that list.",
          "hints": [
            "Here's an example: `help <command>`",
            "Type `help test` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "574",
      "title": "[[ -a countdown.sh ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "574.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "285cc0db866cd9264b377db46cf064d676aac332"
            ]
          },
          "content": "You tried a few of the arithmetic operators, those work for integers. Try one of the file operators. The first one on the list checks if a file exists. Type `[[ -a countdown.sh ]]; echo $?` in the terminal to see if your file exists.",
          "hints": [
            "Enter the suggested commands in the terminal",
            "Type `[[ -a countdown.sh ]]; echo $?` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "575",
      "title": "[[ -a bad_file.txt ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "575.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a933f56fe31d345abd9ac72ccc1ab2d85ed20712"
            ]
          },
          "content": "The file must exist. It's checking the folder the command is entered from. Try it again with `bad_file.txt`.",
          "hints": [
            "Use the same syntax you have been using",
            "Here's an example: `<command>; echo $?`",
            "You previously used `[[ -a countdown.sh ]]; echo $?`",
            "Type `[[ -a bad_file.txt ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "576",
      "title": "[[ -x countdown.sh ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "576.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "aa477504c33b22efe495a045c0700e8854f6f55a"
            ]
          },
          "content": "`bad_file.txt` doesn't exist. I think you're getting the hang of this. Using the same syntax, check if you have permissions to execute your file.",
          "hints": [
            "View the `help test` menu to find the file operator for checking if a file is executable by you",
            "The syntax you want is `[[ ... ]]; echo $?`",
            "Type `[[ -x countdown.sh ]]; echo $?` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "582",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "582.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3eb6ba7a405658efc2a5b759991b85e1a2147cd8"
            ]
          },
          "content": "You played around with a number of the expressions. View the `help [[ expression ]]` menu again that you looked at before to see a few more options.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help [[ expression ]]` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "584",
      "title": "[[ -x countdown.sh && 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "584.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "71f01e7e098323fe50d41c63dcb9c2d4fac5ae6a"
            ]
          },
          "content": "Some of these options existed in the `help test` menu, but I prefer these when they can be used. Enter `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` in the terminal to test if both conditions are true.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "586",
      "title": "[[ -x countdown.sh || 5 -lt 0 ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "586.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "21fa5098744e8b8d7696fc1ed54ecd4949932977"
            ]
          },
          "content": "Both conditions weren't true, so the command gave an error. Try testing the same two conditions with the `or` operator.",
          "hints": [
            "Modify this `[[ -x countdown.sh && 5 -lt 0 ]]; echo $?` with the suggestion and enter it in the terminal",
            "Use the or operator from the `help [[ expession ]]` menu",
            "The `or` operator is `||`",
            "Type `[[ -x countdown.sh || 5 -lt 0 ]]; echo $?` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "588",
      "title": "Change if to [[ $1 -gt 0 ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "588.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "02db3ede979b8886eaa6cb4f050b1dcc9598d7dd"
            ]
          },
          "content": "One of the conditions was true, so you didn't get any errors. I think that's enough of a detour. Back in your script, change the `if` condition to check if the first argument is greater than zero.",
          "hints": [
            "The `if` condition should look like this: `[[ $1 -gt 0 ]]`",
            "It's in the `countdown.sh` file"
          ]
        }
      ]
    },
    {
      "id": "590",
      "title": "Change if !# message",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "590.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "36608402ad04d09f63a9d3fea68463b9e1820edf"
            ]
          },
          "content": "The condition you added should check if a positive integer was entered and execute the `then` area. Change the message printed in the `else` area to `Enter a positive integer as the first argument.` so a user knows what's expected.",
          "hints": [
            "The `else` area should look like this: `echo Enter a positive integer as the first argument.`"
          ]
        }
      ]
    },
    {
      "id": "600",
      "title": "./countdown 1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "600.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "400b99802dcac133d9446e9150538043ecfe3faf"
            ]
          },
          "content": "Run your script and use `1` as a first argument.",
          "hints": [
            "Type `./countdown.sh 1` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "610",
      "title": "./countdown 0",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "610.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "32cfdf006b5b0cccb983d4023e8751ee4da562fc"
            ]
          },
          "content": "Run the script again and use anything but a positive integer as the only argument.",
          "hints": [
            "Type `./countdown.sh 0` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "615",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "615.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2edde637b571ef04d364dbbc9814e4c4edfe968d"
            ]
          },
          "content": "Looks like your `if` condition is working. Next, you want to loop over the argument and count down to zero from it. Check the `help` menu to see if there's any commands for this.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "620",
      "title": "Add for loop for countdown",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "620.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b07115d1918731fbbf66807f302cc9a419393892"
            ]
          },
          "content": "There's two `for` loops in there, you want the second one. Here's an example:\n\n```sh\nfor (( i = 10; i > 0; i-- ))\ndo\n  echo $i\ndone\n```\n\nThe above would print 10 through 1 to the screen. In the `then` are of your condition, replace the `echo` with a `for` loop that prints from your `$1` argument to `1`.",
          "hints": [
            "Use the same syntax as the example except change the `10` to `$1`",
            "Don't include any extra `echo` commands in the `then` area",
            "Your `then` area should look like this:\n```sh\nfor (( i = $1; i > 0; i-- ))\ndo\n  echo $i\ndone\n```"
          ]
        }
      ]
    },
    {
      "id": "630",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "630.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6a430ef84f4bbecb0d4662eca96c23bd4202f635"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "640",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "640.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ad6f2b3d79798b06aadab6262548a346c04bfbad"
            ]
          },
          "content": "It works :smile: But I want it to pause for one second between each number. Check the `help` menu again.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `help` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "650",
      "title": "ls /",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "650.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cfe6e359021d6cb7a4691383b3505c6ecc6b9d47"
            ]
          },
          "content": "I'm not seeing the command I was hoping to. These are the built-in commands, where are the rest? Type `ls /` to look around.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `ls /` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "660",
      "title": "ls /bin",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "660.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8857dc0bef54c9c3a13bc733565454599fc5835c"
            ]
          },
          "content": "The `/` listed what's in the root of the file system. I see a `bin` folder, `bin` stands for `binary`. View what's in it with `ls /bin`.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Type `ls /bin` in the terminal and press enter"
          ]
        }
      ]
    },
    {
      "id": "670",
      "title": "man sleep",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "670.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "5a02815a1d98b1909469cafec114bff25c10328a"
            ]
          },
          "content": "These are some non built-in commands. There's quite a few that should look familiar. One is `bash`, that's the one you used for the `shebang` in your scripts. I see one called `sleep` that might allow you to pause your script while it's counting down. View the manual of it.",
          "hints": [
            "View a manual with `man <command>`",
            "Enter `man sleep` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "675",
      "title": "sleep 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "675.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "281d7aa9e0e3550a3eaca45b42f6c40ccbd54437"
            ]
          },
          "content": "It says you can pause execution for a number of seconds. Try it out in the terminal by entering `sleep 3`.",
          "hints": [
            "Enter the suggested command in the terminal",
            "Enter `sleep 3` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "680",
      "title": "Add sleep to for loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "680.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a31589716997cd4685564b22146f12230cfafee0"
            ]
          },
          "content": "In your `for` loop, use `sleep` to make the script pause for `1` second after each number is printed.",
          "hints": [
            "Add `sleep 1` after you print `i` in your `for` loop"
          ]
        }
      ]
    },
    {
      "id": "690",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "690.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "484abdf8b8660c94ec5f328d45212fe0a18c78a7"
            ]
          },
          "content": "Run your script and use `3` and the first argument again.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "692",
      "title": "Change to >=",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "692.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "76687d8eb95457c1e9c5b6e364f983ef623f0050"
            ]
          },
          "content": "Change for loop to >=",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "694",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "694.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ff9aa4e0bb0792aff9a15287d984edd03341af4a"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "696",
      "title": "Add echo -e \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "696.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "231dbec2665a22a00847636c4783f0ab28875149"
            ]
          },
          "content": "Add `echo -e \"\\n~~ Countdown Timer ~~\\n\"`",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "698",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "698.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6b5103c0fcc8651ac4ec038fc17036c5881439d5"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "700",
      "title": "Add Multiline comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "700.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3f392cf574496ccb6398a7f7a9e61d438fd7e498"
            ]
          },
          "content": "Now it works like it should, you can create a multiline comment like this:\n\n```sh\n: '\n  comment here\n  more comment here\n'\n```\n\nComment out your `for` loop with a multiline comment. I want to try and do this with a `while` loop.",
          "hints": [
            "Comment out your `for` loop with a multiline comment"
          ]
        }
      ]
    },
    {
      "id": "710",
      "title": "Add I variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "710.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "612962a1a9c041e0c9584d5e34dd7ef58279fb42"
            ]
          },
          "content": "Below your comment, create a variable named `I` that is set to the value of your first argument.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "730",
      "title": "help while",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "730.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d15282ea930a70de72c380a8ec7e36ec3d9f2524"
            ]
          },
          "content": "View the `help` menu for the `while` command to see if you can find anything.",
          "hints": [
            "Here's an example: `help <command>`",
            "Enter `help while` in the terminal"
          ]
        }
      ]
    },
    {
      "id": "740",
      "title": "Add while loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "740.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a9b49fa1347b0f523a70e330cda4f5da5288620b"
            ]
          },
          "content": "You can make a `while` loop like this:\n\n```sh\nwhile [[ CONDITION ]]\ndo\n  STATEMENTS\ndone\n```\n\nEcho your `I` variable to the screen while `I` is greater than zero.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "750",
      "title": "Add sleep 1",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "750.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e589089bed2e30154a1401a41a1d03b32ff825b7"
            ]
          },
          "content": "Add `sleep 1`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "753",
      "title": "./countdown 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "753.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7f3b03f25ee0c28e060911b24a81c5fcc4bcf47e"
            ]
          },
          "content": "Run your script and use `3` and the first argument.",
          "hints": [
            "Type `./countdown.sh 3` in the terminal and press enter",
            "Make sure you are in the `project` folder first"
          ]
        }
      ]
    },
    {
      "id": "760",
      "title": "Add (( I-- ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "760.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "600d5b7a6521e97f1343d0bc27572220d05d69f2"
            ]
          },
          "content": "add `((I--))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "770",
      "title": "./countdown.sh 3",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "770.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "9503dae72c2854c36acb2b61283015ce6b687ff5"
            ]
          },
          "content": "Run the script and use 3 as the first argument.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "780",
      "title": "touch bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "780.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0a252605898d1bc2975968a20f4babecad997753"
            ]
          },
          "content": "I think the countdown clock is looking good. The next one is a bingo number generator. Use `touch` to create `bingo.sh` in the same folder as the others.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "790",
      "title": "chmod +x bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "790.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "51b0a5bbe0dc7bc8e451ec10f1108a5398d797c8"
            ]
          },
          "content": "Give your file executable permissions.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "800",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "800.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4638890f8c85c8db9c9d3c06ba3cfbec9aebd854"
            ]
          },
          "content": "Add a \"shebang\" at the top. It's the same as the other two files.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "810",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "810.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "778a9c2aebba65ab074ee01a90c7787e45de08d2"
            ]
          },
          "content": "Add a comment that says, `Bingo Number Generator`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "815",
      "title": "Add echo -e \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "815.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "38b98cc901fa8fc15b29e20b0115d0ee98f3b235"
            ]
          },
          "content": "add echo -e \"\\n~~ Bingo Number Generator ~~\\n\"",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "820",
      "title": "Add NUMBER=5 variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "820.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ff3db83b48fc82856358a2ab06557ff0e129ada9"
            ]
          },
          "content": "NUMBER=5",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "830",
      "title": "echo $NUMBER",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "830.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7663f40912a2438f1e369700ead0bef7e13926a2"
            ]
          },
          "content": "`echo (( $NUMBER ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "840",
      "title": "./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "840.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "65bfc3b426e69e5c873df14c6164941cfba99524"
            ]
          },
          "content": "Run the script",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "845",
      "title": "help let",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "845.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cd3e07be1176a392c2523f383c07b9e1593fe77e"
            ]
          },
          "content": "`help let`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "850",
      "title": "Change to NUMBER=(( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "850.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "df1704c43a7b14043a1b03ed625d7b8012eb5115"
            ]
          },
          "content": "change to `NUMBER=(( $RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "860",
      "title": "run ./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "860.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8fac46a3adfd3d0743fb801d28c476590af63b58"
            ]
          },
          "content": "Run the script",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "863",
      "title": "echo $RANDOM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "863.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a34d12cadd4987469986cd0123d4d5781904e2c5"
            ]
          },
          "content": "`echo $RANDOM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "866",
      "title": "echo $RANDOM % 75",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "866.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b085c3b9df91d6b56047b40e6de41b35a386d930"
            ]
          },
          "content": "`echo $RANDOM % 75`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "869",
      "title": "echo (( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "869.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "11f7e5d148689fc6949451ada3a12f5648b5c5bf"
            ]
          },
          "content": "`echo (( $RANDOM % 75 ))`. You should get an error.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "872",
      "title": "(( $RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "872.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cae6ef716d376096307b391ef2fa7d0fda96add7"
            ]
          },
          "content": "`(( $RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "875",
      "title": "echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "875.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "9e4bc329c3f62b5d5416de1be920cce096508c32"
            ]
          },
          "content": "`echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "878",
      "title": "echo $(( RANDOM % 75 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "878.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a15f8a8ec6506b0640d149b6f57fdd6f3e42e667"
            ]
          },
          "content": "`echo $(( RANDOM % 75 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "881",
      "title": "I=0",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "881.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f1d8ef0e1c4a74bd903800a59608920deb0691d3"
            ]
          },
          "content": "`I=0`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "884",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "884.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "931ce832fe8dcd81e399b1ceaaf814a9427854ff"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "887",
      "title": "(( I++ ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "887.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "58e17dad206297a34f5db2e9ff036ba946ab0736"
            ]
          },
          "content": "`(( I++ ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "890",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "890.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b68c4fc51a2a5cf16644c13d0fbff8a62544cea8"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "893",
      "title": "(( I += 10 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "893.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "7a1a4462354cd89ecb26b08a98921d58dab9616b"
            ]
          },
          "content": "`(( I += 10 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "896",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "896.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0c444cb4455f700aa72d871bc4bed7397a443c42"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "899",
      "title": "echo $(( I + 4 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "899.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "61fbaa462219e0f2465ba14a7e8a8381de0a274c"
            ]
          },
          "content": "`echo $(( I + 4 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "902",
      "title": "echo $I",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "902.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8520a06d62deb18486facf5e3276cb483572515f"
            ]
          },
          "content": "`echo $I`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "905",
      "title": "J=$(( I - 6 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "905.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "91608692e5f33082d362199d04c99e3f98535d24"
            ]
          },
          "content": "`J=$(( I - 6 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "908",
      "title": "echo $J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "908.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "eed6dfe33c80ac0e867a6fd052abcc311f7968cb"
            ]
          },
          "content": "`echo $J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "911",
      "title": "echo $(( J * 5 + 25 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "911.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "63cdb072e4571098662c223a49013414d830d7e2"
            ]
          },
          "content": "`echo $(( J * 5 + 25 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "912",
      "title": "echo $J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "912.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "db3a11c8a55813d2f248c72a5de09193158fd451"
            ]
          },
          "content": "`echo $J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "914",
      "title": "declare -p J",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "914.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3ff5bf18bc7316c7f9982c2462a781a351f7fe14"
            ]
          },
          "content": "`declare -p J`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "916",
      "title": "declare -p RANDOM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "916.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "13fa134db9dd3727478814b9f354567505ada63c"
            ]
          },
          "content": "`declare -p RANDOM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "920",
      "title": "NUM=$(( RANDOM % 75 + 1 ))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "920.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d8dc82cb7b303ea51fa9aa0a2ac1b3feb7e54056"
            ]
          },
          "content": "`NUM=$(( RANDOM % 75 + 1 ))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "923",
      "title": "echo $NUM",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "923.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "abc0e976861c371e3d05de17a3031bfa36b5be47"
            ]
          },
          "content": "`echo $NUM`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "928",
      "title": "Set NUMBER=$(( RANDOM % 75 + 1))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "928.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "45ff8a8d0b334c33f27b08cccdf467095c30f856"
            ]
          },
          "content": "Change your number variable to `$(( RANDOM % 75 + 1 ))` and your echo statement to just echo $NUMBER again.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "930",
      "title": "run ./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "930.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4c6af305e6d234def4166e62cc6d4b960f14abd3"
            ]
          },
          "content": "Run the script to make sure it's working",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "940",
      "title": "Add TEXT variable",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "940.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "814d75f14cadc11c733d75aedc789978f9d3ef7b"
            ]
          },
          "content": "Create `TEXT=\"The next number is, \"`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "950",
      "title": "Add first if <= 15",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "950.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "87b46607e0b02314eee8ea2f8d18122a73e10e48"
            ]
          },
          "content": "Create `if (( $NUMBER <= 15 )) then echo $TEXT B:$NUMBER fi`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "960",
      "title": "Add elif < 31",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "960.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "cffa770481f41ebfcf4e2ef5e8d32bf39c37794d"
            ]
          },
          "content": "Add elif (( $NUMBER < 31 )) then",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "970",
      "title": "Add elif -le 45",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "970.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1a8735001590aff329795f6dc24ff16a8215cd2d"
            ]
          },
          "content": "Add elif [[ number -le 45 ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "980",
      "title": "Add elif -lt 61",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "980.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c8e0792507c61248648dd38fb347212f697073e1"
            ]
          },
          "content": "elif [[ number -lt 61 ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1000",
      "title": "./bingo.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1000.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3f8f792e16a8e2f44f7b08bcf925057c20060c17"
            ]
          },
          "content": "Run your script a few times and make sure it's working.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1010",
      "title": "touch fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1010.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "70c65990ebc0725fbab5c55264cfa24704727013"
            ]
          },
          "content": "Looks like it's working :smile: Next project is a fortune teller. Use the `touch` command to create `fortune.sh` in the same folder as the other scripts.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1020",
      "title": "chmod +x fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1020.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "844c40d754a232bb2f788128f42cb741b44d30b7"
            ]
          },
          "content": "Change the permissions",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1030",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1030.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "db36b347649d5397e7ff8931ff29fda2eb69c4df"
            ]
          },
          "content": "Add a shebang",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1040",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1040.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f28f17dcfea710ec1d87ef885f813fc499e3b592"
            ]
          },
          "content": "Add comment `Program to tell a persons fortune`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1050",
      "title": "Add echo \"title\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1050.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "3f9691fe7cd1de6ca0b1470807b315d22bc55cd6"
            ]
          },
          "content": "Add echo `~~ Fortune teller ~~`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1060",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1060.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4f74dfd149690c5cea564900dbfdb775c26abcbc"
            ]
          },
          "content": "fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1070",
      "title": "ARR=(\"a\" \"b\" \"c\")",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1070.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "688d008e94e673dac6493ae8cb41ae9017e4c90a"
            ]
          },
          "content": "In terminal: ARR=(\"a\" \"b\" \"c\")",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1080",
      "title": "echo ${ARR[1]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1080.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "971e5a44cfa7f251ba0a3c3682d4ad7e91038bfe"
            ]
          },
          "content": "`echo ${ARR[1]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1090",
      "title": "echo ${ARR[@]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1090.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c71438ffcec568bdbdbf86b805e29fe10b1ccf5e"
            ]
          },
          "content": "`echo ${ARR[@]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1100",
      "title": "declare -p ARR",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1100.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c131a1913af804379329134c327b81bebca726ea"
            ]
          },
          "content": "`declare -p ARR`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1110",
      "title": "Add RESPONSES array",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1110.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c295a265a01dc2fa3c18466d3e2b2b89c3af0436"
            ]
          },
          "content": "Create the array `RESPONSES=(\"Yes\" \"No\" \"Maybe\")` - but with all entries",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1120",
      "title": "echo ${RESPONSES[5]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1120.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8827c44e63a7a711b8fc831e4d5d224b8203105b"
            ]
          },
          "content": "`echo ${RESPONSES[5]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1130",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1130.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bc86a2eed5c38467b9da9b3b5a8af08e6e290456"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1140",
      "title": "Add N=$((RANDOM % 7))",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1140.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0c8bd619380eb3848509f64126cc9468e9c21de6"
            ]
          },
          "content": "Add `N=$((RANDOM % 7))`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1150",
      "title": "Change to echo ${RESPONSES[$N]}",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1150.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0610def54f16885bbd558a90d208a795360d400e"
            ]
          },
          "content": "Change to `echo ${RESPONSES[$N]}`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1160",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1160.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "894a60cc0c5f64cf9ee3ba40eb810a16f04aa696"
            ]
          },
          "content": "`help`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1170",
      "title": "help function",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1170.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "520f83bca5fda8163b908dff9712114b1c1bdcb5"
            ]
          },
          "content": "`help function`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1180",
      "title": "Add GET_FORTUNE function",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1180.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "f5b2aca0fec5ba0406c5b82a61b92adba11a4c1c"
            ]
          },
          "content": "Add `GET_FORTUNE` function.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1190",
      "title": "Add echo Ask a yes or no question",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1190.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "14ce0569d34f5c86c496a7be427c5f2323b3c260"
            ]
          },
          "content": "Add echo ask a yes or no question",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1200",
      "title": "Add GET_FORTUNE function call",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1200.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a0f13e62ae70429822758652dc03594c948b5265"
            ]
          },
          "content": "Add `GET_FORTUNE` function call.",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1210",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1210.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b178780b4c2011e4a5b283593d246b5a8a8397fd"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1220",
      "title": "Add read QUESTION",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1220.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "620732f817a2877db37752b1c5eb1a04507484ac"
            ]
          },
          "content": "Add `read QUESTION`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1230",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1230.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c4a3911914410b00e40d708042f6d984ae8bcbd2"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1240",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1240.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "20f74a019c1e75e3f54346b4c62467961ece6290"
            ]
          },
          "content": "help",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1250",
      "title": "help until",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1250.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ce6f64fd70398f16b315dcde1cc5d6fa186258bd"
            ]
          },
          "content": "`help until`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1260",
      "title": "Add until loop",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1260.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6af6268bf0affea1b03f33ee32808a370f11e638"
            ]
          },
          "content": "Add until [[ question == \"test?\" ]]",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1270",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1270.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1a697bfb37e50308ec715882f9bf85e3de6e948b"
            ]
          },
          "content": "./fortune.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1280",
      "title": "help [[ expression ]]",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1280.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "41d25ec40edb846b26325278d20884afcd26a320"
            ]
          },
          "content": "`help [[ expression ]]`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1290",
      "title": "[[ hello == hello ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1290.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "b3aaf43d48b7676d487e7aa2e043b7533a5fddb0"
            ]
          },
          "content": "`[[ hello == hello ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1300",
      "title": "[[ hello == world ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1300.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "a16f83ba7b0080feb0d62a7e9e99cd57d9a42528"
            ]
          },
          "content": "`[[ hello == world ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1310",
      "title": "[[ hello =~ el ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1310.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "2a025d6bc1ab41d29c45ae6b74dc233b4f5c49e4"
            ]
          },
          "content": "`[[ hello =~ el ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1320",
      "title": "[[ \"hello world\" =~ \"ello\" ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1320.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "97b721f75507b1ca745af50f038692b600d674fa"
            ]
          },
          "content": "`[[ \"hello world\" =~ \"ello\" ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1330",
      "title": "[[ \"hello world\" =~ ^h ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1330.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "0d26d6b72be274a922b7fdbf589841eb9fa9f430"
            ]
          },
          "content": "`[[ \"hello world\" =~ ^h ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1340",
      "title": "[[ \"hello world\" =~ ^h.+d? ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1340.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "c85b1cb4fc1ed7262879fdee858dc52e3a73ed73"
            ]
          },
          "content": "`[[ \"hello world\" =~ ^h.+d? ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1350",
      "title": "VAR=\"hello world\"",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1350.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "82fe54395dc850d484a2b4990ec7eb80af624cc4"
            ]
          },
          "content": "`VAR=\"hello world\"`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1360",
      "title": "echo $VAR",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1360.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "fce8d276c43985e3e28fb3343599aec2247f7043"
            ]
          },
          "content": "`echo $VAR`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1370",
      "title": "[[ $VAR == \"hello world\" ]]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1370.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6ce9add5a186d34ca7a04422c50c60b281c24866"
            ]
          },
          "content": "`[[ $VAR == \"hello world\" ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1380",
      "title": "[[ $VAR =~ \\?$ ]; echo $?",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1380.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e1f341cca408beed3991b6d1854d9999a6f1181b"
            ]
          },
          "content": "`[[ $VAR =~ \\?$ ]]; echo $?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1390",
      "title": "Change until condition",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1390.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6fd534f716dd3fb7889bbffee8581ad7536c97d7"
            ]
          },
          "content": "Change until condition to see if it ends in a `?`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1400",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1400.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ca903a8f7346fed432409d12bf54febd71907251"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1410",
      "title": "Add if to GET_FORTUNE",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1410.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "35a4a99096b847693593d3b1957fce5f6dd7074e"
            ]
          },
          "content": "Add `if` to `GET_FORTUNE`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1420",
      "title": "./fortune.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1420.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "54b1edd01df29b0ad4cae876216dd3ebdee9d41d"
            ]
          },
          "content": "`./fortune.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1430",
      "title": "touch five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1430.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "bcb23bd29d39f17f8a2e00abbac64b65e68f5739"
            ]
          },
          "content": "`touch five.sh`",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1440",
      "title": "chmod +x five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1440.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d3b210a07f46e68a43aaa3d32ce4642942ae4efb"
            ]
          },
          "content": "chmod +x five.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1450",
      "title": "Add shebang",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1450.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "41078b3bd51ab23becd5b08905d1e760fc0d3db6"
            ]
          },
          "content": "Add shebang",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1460",
      "title": "Add comment",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1460.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "64418bb10d30b20c22cd0d3ac15e0eeb42dad966"
            ]
          },
          "content": "add comment 'program to run my other four programs'",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1470",
      "title": "Add ./questionnaire.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1470.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4e4284985ce11dae552e5d7095c32bbba5f914b6"
            ]
          },
          "content": "Add questionnaire.sh to the file",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1480",
      "title": "./five",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1480.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "35e1065eb04e02c4858c256a73be1519b1c487ce"
            ]
          },
          "content": "./five",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1490",
      "title": "Add the rest of the scripts",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1490.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4e4efbf45afd47b5d64c89a71384e543a1fe57b0"
            ]
          },
          "content": "Add the rest of the scripts to the file",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1500",
      "title": "Clear",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1500.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "1269451c8c040a56c788c408860e2aeb325da154"
            ]
          },
          "content": "clear",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1510",
      "title": "./five",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1510.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "28383c583b59c94a9f36abbcd071c3e5bd9dad59"
            ]
          },
          "content": "./five",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1520",
      "title": "help",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1520.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "42d459466f89a8192879d952a579555a6d393466"
            ]
          },
          "content": "help",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1530",
      "title": "help type",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1530.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "8544b211de622976fe14a88d9fa4689e48a1cf68"
            ]
          },
          "content": "help type",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1540",
      "title": "type echo",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1540.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "6fe99c4ec40320515b61edd22863e07d4aded7a6"
            ]
          },
          "content": "type echo",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1550",
      "title": "type read",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1550.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "ccabe6cfd7c80ec15abec5fe4db0033fd73ee2ac"
            ]
          },
          "content": "help type",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1560",
      "title": "type if",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1560.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "e98adaead9881497074dd59a1f0991346699c2bb"
            ]
          },
          "content": "type if",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1570",
      "title": "type then",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1570.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "86e48b7476e82db01a229261332ecfd83f4c3b53"
            ]
          },
          "content": "type then",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1580",
      "title": "type bash",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1580.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "52c601486ff687c7f2de519e5189c4e805cd72ce"
            ]
          },
          "content": "type bash",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1590",
      "title": "type psql",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1590.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "4ebb9bb300bdfd64f74ac73d9845691c17b6239d"
            ]
          },
          "content": "type psql",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1600",
      "title": "type ./five.sh",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1600.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "d1089447b8edbfa6406bb9707fcff7d673af9e83"
            ]
          },
          "content": "type ./five.sh",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    },
    {
      "id": "1610",
      "title": "exit",
      "summary": "",
      "content": "",
      "steps": [
        {
          "id": "1610.1",
          "setup": {
            "watchers": [
              "../.bash_history"
            ],
            "commits": [
              "92c991a438da45f7f5200d9750a025894f9690d3"
            ]
          },
          "content": "exit",
          "hints": [
            "Capitalization matters",
            "If the tests don't run automatically, \"trash\" all the terminals and try the instructions again"
          ]
        }
      ]
    }
  ]
}